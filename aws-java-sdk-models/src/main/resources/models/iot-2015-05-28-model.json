{
  "authorizers" : { },
  "metadata" : {
    "apiVersion" : "2015-05-28",
    "endpointPrefix" : "iot",
    "jsonVersion" : null,
    "protocol" : "rest-json",
    "resultWrapped" : false,
    "serviceAbbreviation" : null,
    "serviceFullName" : "AWS IoT",
    "signatureVersion" : "v4",
    "signingName" : "execute-api",
    "targetPrefix" : null,
    "uid" : "iot-2015-05-28",
    "xmlNamespace" : null
  },
  "operations" : {
    "AcceptCertificateTransfer" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Accepts a pending certificate transfer. The default state of the certificate is INACTIVE.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>You can't revert the certificate transfer because the transfer is already complete.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 410
        },
        "exception" : true,
        "fault" : false,
        "shape" : "TransferAlreadyCompletedException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "PATCH",
        "requestUri" : "/accept-certificate-transfer/{certificateId}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the AcceptCertificateTransfer operation.</p>",
        "locationName" : null,
        "shape" : "AcceptCertificateTransferRequest",
        "xmlNamespace" : null
      },
      "name" : "AcceptCertificateTransfer",
      "output" : null
    },
    "AttachPrincipalPolicy" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Attaches the specified policy to the specified principal (certificate or other credential).</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      }, {
        "documentation" : "<p>The number of attached entities exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 410
        },
        "exception" : true,
        "fault" : false,
        "shape" : "LimitExceededException"
      } ],
      "http" : {
        "method" : "PUT",
        "requestUri" : "/principal-policies/{policyName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the AttachPrincipalPolicy operation.</p>",
        "locationName" : null,
        "shape" : "AttachPrincipalPolicyRequest",
        "xmlNamespace" : null
      },
      "name" : "AttachPrincipalPolicy",
      "output" : null
    },
    "AttachThingPrincipal" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Attaches the specified principal to the specified thing.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "PUT",
        "requestUri" : "/things/{thingName}/principals",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the AttachThingPrincipal operation.</p>",
        "locationName" : null,
        "shape" : "AttachThingPrincipalRequest",
        "xmlNamespace" : null
      },
      "name" : "AttachThingPrincipal",
      "output" : {
        "documentation" : "<p>The output from the AttachThingPrincipal operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "AttachThingPrincipalResponse"
      }
    },
    "CancelCertificateTransfer" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Cancels a pending transfer for the specified certificate.</p> <p><b>Note</b> Only the transfer source account can use this operation to cancel a transfer. (Transfer destinations can use <a>RejectCertificateTransfer</a> instead.) After transfer, AWS IoT returns the certificate to the source account in the INACTIVE state. After the destination account has accepted the transfer, the transfer cannot be cancelled.</p> <p>After a certificate transfer is cancelled, the status of the certificate changes from PENDING_TRANSFER to INACTIVE.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>You can't revert the certificate transfer because the transfer is already complete.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 410
        },
        "exception" : true,
        "fault" : false,
        "shape" : "TransferAlreadyCompletedException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "PATCH",
        "requestUri" : "/cancel-certificate-transfer/{certificateId}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the CancelCertificateTransfer operation.</p>",
        "locationName" : null,
        "shape" : "CancelCertificateTransferRequest",
        "xmlNamespace" : null
      },
      "name" : "CancelCertificateTransfer",
      "output" : null
    },
    "CreateCertificateFromCsr" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Creates an X.509 certificate using the specified certificate signing request.</p> <p><b>Note</b> Reusing the same certificate signing request (CSR) results in a distinct certificate.</p> <p>You can create multiple certificates in a batch by creating a directory, copying multiple .csr files into that directory, and then specifying that directory on the command line. The following commands show how to create a batch of certificates given a batch of CSRs. </p> <p>Assuming a set of CSRs are located inside of the directory my-csr-directory:</p> <p>On Linux and OS X, the command is:</p> <p>$ ls my-csr-directory/ | xargs -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{}</p> <p> This command lists all of the CSRs in my-csr-directory and pipes each CSR file name to the aws iot create-certificate-from-csr AWS CLI command to create a certificate for the corresponding CSR. </p> <p> The aws iot create-certificate-from-csr part of the command can also be run in parallel to speed up the certificate creation process: </p> <p> $ ls my-csr-directory/ | xargs -P 10 -I {} aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/{} </p> <p> On Windows PowerShell, the command to create certificates for all CSRs in my-csr-directory is: </p> <p> &gt; ls -Name my-csr-directory | %{aws iot create-certificate-from-csr --certificate-signing-request file://my-csr-directory/$_} </p> <p> On a Windows command prompt, the command to create certificates for all CSRs in my-csr-directory is: </p> <p> &gt; forfiles /p my-csr-directory /c \"cmd /c aws iot create-certificate-from-csr --certificate-signing-request file://@path\"</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "POST",
        "requestUri" : "/certificates",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the CreateCertificateFromCsr operation.</p>",
        "locationName" : null,
        "shape" : "CreateCertificateFromCsrRequest",
        "xmlNamespace" : null
      },
      "name" : "CreateCertificateFromCsr",
      "output" : {
        "documentation" : "<p>The output from the CreateCertificateFromCsr operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "CreateCertificateFromCsrResponse"
      }
    },
    "CreateKeysAndCertificate" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Creates a 2048-bit RSA key pair and issues an X.509 certificate using the issued public key.</p> <p><b>Note</b> This is the only time AWS IoT issues the private key for this certificate, so it is important to keep it in a secure location.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "POST",
        "requestUri" : "/keys-and-certificate",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the CreateKeysAndCertificate operation.</p>",
        "locationName" : null,
        "shape" : "CreateKeysAndCertificateRequest",
        "xmlNamespace" : null
      },
      "name" : "CreateKeysAndCertificate",
      "output" : {
        "documentation" : "<p>The output of the CreateKeysAndCertificate operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "CreateKeysAndCertificateResponse"
      }
    },
    "CreatePolicy" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Creates an AWS IoT policy.</p> <p>The created policy is the default version for the policy. This operation creates a policy version with a version identifier of <b>1</b> and sets <b>1</b> as the policy's default version.</p>",
      "errors" : [ {
        "documentation" : "<p>The resource already exists.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 409
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceAlreadyExistsException"
      }, {
        "documentation" : "<p>The policy documentation is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "MalformedPolicyException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "POST",
        "requestUri" : "/policies/{policyName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the CreatePolicy operation.</p>",
        "locationName" : null,
        "shape" : "CreatePolicyRequest",
        "xmlNamespace" : null
      },
      "name" : "CreatePolicy",
      "output" : {
        "documentation" : "<p>The output from the CreatePolicy operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "CreatePolicyResponse"
      }
    },
    "CreatePolicyVersion" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Creates a new version of the specified AWS IoT policy. To update a policy, create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must use <a>DeletePolicyVersion</a> to delete an existing version before you create a new one.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the operative version (that is, the version that is in effect for the certificates to which the policy is attached).</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The policy documentation is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "MalformedPolicyException"
      }, {
        "documentation" : "<p>The number of policy versions exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 409
        },
        "exception" : true,
        "fault" : false,
        "shape" : "VersionsLimitExceededException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "POST",
        "requestUri" : "/policies/{policyName}/version",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the CreatePolicyVersion operation.</p>",
        "locationName" : null,
        "shape" : "CreatePolicyVersionRequest",
        "xmlNamespace" : null
      },
      "name" : "CreatePolicyVersion",
      "output" : {
        "documentation" : "<p>The output of the CreatePolicyVersion operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "CreatePolicyVersionResponse"
      }
    },
    "CreateThing" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Creates a thing record in the thing registry.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      }, {
        "documentation" : "<p>The resource already exists.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 409
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceAlreadyExistsException"
      }, {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      } ],
      "http" : {
        "method" : "POST",
        "requestUri" : "/things/{thingName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the CreateThing operation.</p>",
        "locationName" : null,
        "shape" : "CreateThingRequest",
        "xmlNamespace" : null
      },
      "name" : "CreateThing",
      "output" : {
        "documentation" : "<p>The output of the CreateThing operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "CreateThingResponse"
      }
    },
    "CreateThingType" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Creates a new thing type.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      }, {
        "documentation" : "<p>The resource already exists.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 409
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceAlreadyExistsException"
      } ],
      "http" : {
        "method" : "POST",
        "requestUri" : "/thing-types/{thingTypeName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the CreateThingType operation.</p>",
        "locationName" : null,
        "shape" : "CreateThingTypeRequest",
        "xmlNamespace" : null
      },
      "name" : "CreateThingType",
      "output" : {
        "documentation" : "<p>The output of the CreateThingType operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "CreateThingTypeResponse"
      }
    },
    "CreateTopicRule" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Creates a rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.</p>",
      "errors" : [ {
        "documentation" : "<p>The Rule-SQL expression can't be parsed correctly.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "SqlParseException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The resource already exists.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 409
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceAlreadyExistsException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      } ],
      "http" : {
        "method" : "POST",
        "requestUri" : "/rules/{ruleName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the CreateTopicRule operation.</p>",
        "locationName" : null,
        "shape" : "CreateTopicRuleRequest",
        "xmlNamespace" : null
      },
      "name" : "CreateTopicRule",
      "output" : null
    },
    "DeleteCACertificate" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Deletes a registered CA certificate.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The certificate operation is not allowed.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 406
        },
        "exception" : true,
        "fault" : false,
        "shape" : "CertificateStateException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      }, {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      } ],
      "http" : {
        "method" : "DELETE",
        "requestUri" : "/cacertificate/{caCertificateId}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>Input for the DeleteCACertificate operation.</p>",
        "locationName" : null,
        "shape" : "DeleteCACertificateRequest",
        "xmlNamespace" : null
      },
      "name" : "DeleteCACertificate",
      "output" : {
        "documentation" : "<p>The output for the DeleteCACertificate operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "DeleteCACertificateResponse"
      }
    },
    "DeleteCertificate" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Deletes the specified certificate.</p> <p>A certificate cannot be deleted if it has a policy attached to it or if its status is set to ACTIVE. To delete a certificate, first use the <a>DetachPrincipalPolicy</a> API to detach all policies. Next, use the <a>UpdateCertificate</a> API to set the certificate to the INACTIVE status.</p>",
      "errors" : [ {
        "documentation" : "<p>The certificate operation is not allowed.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 406
        },
        "exception" : true,
        "fault" : false,
        "shape" : "CertificateStateException"
      }, {
        "documentation" : "<p>You can't delete the resource because it is attached to one or more resources.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 409
        },
        "exception" : true,
        "fault" : false,
        "shape" : "DeleteConflictException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      }, {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      } ],
      "http" : {
        "method" : "DELETE",
        "requestUri" : "/certificates/{certificateId}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DeleteCertificate operation.</p>",
        "locationName" : null,
        "shape" : "DeleteCertificateRequest",
        "xmlNamespace" : null
      },
      "name" : "DeleteCertificate",
      "output" : null
    },
    "DeletePolicy" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Deletes the specified policy.</p> <p>A policy cannot be deleted if it has non-default versions or it is attached to any certificate.</p> <p>To delete a policy, use the DeletePolicyVersion API to delete all non-default versions of the policy; use the DetachPrincipalPolicy API to detach the policy from any certificate; and then use the DeletePolicy API to delete the policy.</p> <p>When a policy is deleted using DeletePolicy, its default version is deleted with it.</p>",
      "errors" : [ {
        "documentation" : "<p>You can't delete the resource because it is attached to one or more resources.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 409
        },
        "exception" : true,
        "fault" : false,
        "shape" : "DeleteConflictException"
      }, {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "DELETE",
        "requestUri" : "/policies/{policyName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DeletePolicy operation.</p>",
        "locationName" : null,
        "shape" : "DeletePolicyRequest",
        "xmlNamespace" : null
      },
      "name" : "DeletePolicy",
      "output" : null
    },
    "DeletePolicyVersion" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Deletes the specified version of the specified policy. You cannot delete the default version of a policy using this API. To delete the default version of a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use ListPolicyVersions.</p>",
      "errors" : [ {
        "documentation" : "<p>You can't delete the resource because it is attached to one or more resources.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 409
        },
        "exception" : true,
        "fault" : false,
        "shape" : "DeleteConflictException"
      }, {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "DELETE",
        "requestUri" : "/policies/{policyName}/version/{policyVersionId}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DeletePolicyVersion operation.</p>",
        "locationName" : null,
        "shape" : "DeletePolicyVersionRequest",
        "xmlNamespace" : null
      },
      "name" : "DeletePolicyVersion",
      "output" : null
    },
    "DeleteRegistrationCode" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Deletes a CA certificate registration code.</p>",
      "errors" : [ {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "DELETE",
        "requestUri" : "/registrationcode",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DeleteRegistrationCode operation.</p>",
        "locationName" : null,
        "shape" : "DeleteRegistrationCodeRequest",
        "xmlNamespace" : null
      },
      "name" : "DeleteRegistrationCode",
      "output" : {
        "documentation" : "<p>The output for the DeleteRegistrationCode operation. </p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "DeleteRegistrationCodeResponse"
      }
    },
    "DeleteThing" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Deletes the specified thing.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>An exception thrown when the version of a thing passed to a command is different than the version specified with the --version parameter. </p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 409
        },
        "exception" : true,
        "fault" : false,
        "shape" : "VersionConflictException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "DELETE",
        "requestUri" : "/things/{thingName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DeleteThing operation.</p>",
        "locationName" : null,
        "shape" : "DeleteThingRequest",
        "xmlNamespace" : null
      },
      "name" : "DeleteThing",
      "output" : {
        "documentation" : "<p>The output of the DeleteThing operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "DeleteThingResponse"
      }
    },
    "DeleteThingType" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Deletes the specified thing type . You cannot delete a thing type if it has things associated with it. To delete a thing type, first mark it as deprecated by calling <a>DeprecateThingType</a>, then remove any associated things by calling <a>UpdateThing</a> to change the thing type on any associated thing, and finally use <a>DeleteThingType</a> to delete the thing type.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "DELETE",
        "requestUri" : "/thing-types/{thingTypeName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DeleteThingType operation.</p>",
        "locationName" : null,
        "shape" : "DeleteThingTypeRequest",
        "xmlNamespace" : null
      },
      "name" : "DeleteThingType",
      "output" : {
        "documentation" : "<p>The output for the DeleteThingType operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "DeleteThingTypeResponse"
      }
    },
    "DeleteTopicRule" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Deletes the specified rule.</p>",
      "errors" : [ {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      } ],
      "http" : {
        "method" : "DELETE",
        "requestUri" : "/rules/{ruleName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DeleteTopicRule operation.</p>",
        "locationName" : null,
        "shape" : "DeleteTopicRuleRequest",
        "xmlNamespace" : null
      },
      "name" : "DeleteTopicRule",
      "output" : null
    },
    "DeprecateThingType" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Deprecates a thing type. You can not associate new things with deprecated thing type.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "POST",
        "requestUri" : "/thing-types/{thingTypeName}/deprecate",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DeprecateThingType operation.</p>",
        "locationName" : null,
        "shape" : "DeprecateThingTypeRequest",
        "xmlNamespace" : null
      },
      "name" : "DeprecateThingType",
      "output" : {
        "documentation" : "<p>The output for the DeprecateThingType operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "DeprecateThingTypeResponse"
      }
    },
    "DescribeCACertificate" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Describes a registered CA certificate.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      }, {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/cacertificate/{caCertificateId}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DescribeCACertificate operation.</p>",
        "locationName" : null,
        "shape" : "DescribeCACertificateRequest",
        "xmlNamespace" : null
      },
      "name" : "DescribeCACertificate",
      "output" : {
        "documentation" : "<p>The output from the DescribeCACertificate operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "DescribeCACertificateResponse"
      }
    },
    "DescribeCertificate" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Gets information about the specified certificate.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      }, {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/certificates/{certificateId}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DescribeCertificate operation.</p>",
        "locationName" : null,
        "shape" : "DescribeCertificateRequest",
        "xmlNamespace" : null
      },
      "name" : "DescribeCertificate",
      "output" : {
        "documentation" : "<p>The output of the DescribeCertificate operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "DescribeCertificateResponse"
      }
    },
    "DescribeEndpoint" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Returns a unique endpoint specific to the AWS account making the call.</p>",
      "errors" : [ {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/endpoint",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DescribeEndpoint operation.</p>",
        "locationName" : null,
        "shape" : "DescribeEndpointRequest",
        "xmlNamespace" : null
      },
      "name" : "DescribeEndpoint",
      "output" : {
        "documentation" : "<p>The output from the DescribeEndpoint operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "DescribeEndpointResponse"
      }
    },
    "DescribeThing" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Gets information about the specified thing.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/things/{thingName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DescribeThing operation.</p>",
        "locationName" : null,
        "shape" : "DescribeThingRequest",
        "xmlNamespace" : null
      },
      "name" : "DescribeThing",
      "output" : {
        "documentation" : "<p>The output from the DescribeThing operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "DescribeThingResponse"
      }
    },
    "DescribeThingType" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Gets information about the specified thing type.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/thing-types/{thingTypeName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DescribeThingType operation.</p>",
        "locationName" : null,
        "shape" : "DescribeThingTypeRequest",
        "xmlNamespace" : null
      },
      "name" : "DescribeThingType",
      "output" : {
        "documentation" : "<p>The output for the DescribeThingType operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "DescribeThingTypeResponse"
      }
    },
    "DetachPrincipalPolicy" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Removes the specified policy from the specified certificate.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "DELETE",
        "requestUri" : "/principal-policies/{policyName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DetachPrincipalPolicy operation.</p>",
        "locationName" : null,
        "shape" : "DetachPrincipalPolicyRequest",
        "xmlNamespace" : null
      },
      "name" : "DetachPrincipalPolicy",
      "output" : null
    },
    "DetachThingPrincipal" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Detaches the specified principal from the specified thing.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "DELETE",
        "requestUri" : "/things/{thingName}/principals",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DetachThingPrincipal operation.</p>",
        "locationName" : null,
        "shape" : "DetachThingPrincipalRequest",
        "xmlNamespace" : null
      },
      "name" : "DetachThingPrincipal",
      "output" : {
        "documentation" : "<p>The output from the DetachThingPrincipal operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "DetachThingPrincipalResponse"
      }
    },
    "DisableTopicRule" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Disables the specified rule.</p>",
      "errors" : [ {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      } ],
      "http" : {
        "method" : "POST",
        "requestUri" : "/rules/{ruleName}/disable",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the DisableTopicRuleRequest operation.</p>",
        "locationName" : null,
        "shape" : "DisableTopicRuleRequest",
        "xmlNamespace" : null
      },
      "name" : "DisableTopicRule",
      "output" : null
    },
    "EnableTopicRule" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Enables the specified rule.</p>",
      "errors" : [ {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      } ],
      "http" : {
        "method" : "POST",
        "requestUri" : "/rules/{ruleName}/enable",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the EnableTopicRuleRequest operation.</p>",
        "locationName" : null,
        "shape" : "EnableTopicRuleRequest",
        "xmlNamespace" : null
      },
      "name" : "EnableTopicRule",
      "output" : null
    },
    "GetLoggingOptions" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Gets the logging options.</p>",
      "errors" : [ {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/loggingOptions",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the GetLoggingOptions operation.</p>",
        "locationName" : null,
        "shape" : "GetLoggingOptionsRequest",
        "xmlNamespace" : null
      },
      "name" : "GetLoggingOptions",
      "output" : {
        "documentation" : "<p>The output from the GetLoggingOptions operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "GetLoggingOptionsResponse"
      }
    },
    "GetPolicy" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Gets information about the specified policy with the policy document of the default version.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/policies/{policyName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the GetPolicy operation.</p>",
        "locationName" : null,
        "shape" : "GetPolicyRequest",
        "xmlNamespace" : null
      },
      "name" : "GetPolicy",
      "output" : {
        "documentation" : "<p>The output from the GetPolicy operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "GetPolicyResponse"
      }
    },
    "GetPolicyVersion" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Gets information about the specified policy version.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/policies/{policyName}/version/{policyVersionId}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the GetPolicyVersion operation.</p>",
        "locationName" : null,
        "shape" : "GetPolicyVersionRequest",
        "xmlNamespace" : null
      },
      "name" : "GetPolicyVersion",
      "output" : {
        "documentation" : "<p>The output from the GetPolicyVersion operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "GetPolicyVersionResponse"
      }
    },
    "GetRegistrationCode" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Gets a registration code used to register a CA certificate with AWS IoT.</p>",
      "errors" : [ {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/registrationcode",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input to the GetRegistrationCode operation.</p>",
        "locationName" : null,
        "shape" : "GetRegistrationCodeRequest",
        "xmlNamespace" : null
      },
      "name" : "GetRegistrationCode",
      "output" : {
        "documentation" : "<p>The output from the GetRegistrationCode operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "GetRegistrationCodeResponse"
      }
    },
    "GetTopicRule" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Gets information about the specified rule.</p>",
      "errors" : [ {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/rules/{ruleName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the GetTopicRule operation.</p>",
        "locationName" : null,
        "shape" : "GetTopicRuleRequest",
        "xmlNamespace" : null
      },
      "name" : "GetTopicRule",
      "output" : {
        "documentation" : "<p>The output from the GetTopicRule operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "GetTopicRuleResponse"
      }
    },
    "ListCACertificates" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Lists the CA certificates registered for your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/cacertificates",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>Input for the ListCACertificates operation.</p>",
        "locationName" : null,
        "shape" : "ListCACertificatesRequest",
        "xmlNamespace" : null
      },
      "name" : "ListCACertificates",
      "output" : {
        "documentation" : "<p>The output from the ListCACertificates operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "ListCACertificatesResponse"
      }
    },
    "ListCertificates" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Lists the certificates registered in your AWS account.</p> <p>The results are paginated with a default page size of 25. You can use the returned marker to retrieve additional results.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/certificates",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the ListCertificates operation.</p>",
        "locationName" : null,
        "shape" : "ListCertificatesRequest",
        "xmlNamespace" : null
      },
      "name" : "ListCertificates",
      "output" : {
        "documentation" : "<p>The output of the ListCertificates operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "ListCertificatesResponse"
      }
    },
    "ListCertificatesByCA" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>List the device certificates signed by the specified CA certificate.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/certificates-by-ca/{caCertificateId}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input to the ListCertificatesByCA operation.</p>",
        "locationName" : null,
        "shape" : "ListCertificatesByCARequest",
        "xmlNamespace" : null
      },
      "name" : "ListCertificatesByCA",
      "output" : {
        "documentation" : "<p>The output of the ListCertificatesByCA operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "ListCertificatesByCAResponse"
      }
    },
    "ListOutgoingCertificates" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Lists certificates that are being transfered but not yet accepted.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/certificates-out-going",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input to the ListOutgoingCertificates operation.</p>",
        "locationName" : null,
        "shape" : "ListOutgoingCertificatesRequest",
        "xmlNamespace" : null
      },
      "name" : "ListOutgoingCertificates",
      "output" : {
        "documentation" : "<p>The output from the ListOutgoingCertificates operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "ListOutgoingCertificatesResponse"
      }
    },
    "ListPolicies" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Lists your policies.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/policies",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the ListPolicies operation.</p>",
        "locationName" : null,
        "shape" : "ListPoliciesRequest",
        "xmlNamespace" : null
      },
      "name" : "ListPolicies",
      "output" : {
        "documentation" : "<p>The output from the ListPolicies operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "ListPoliciesResponse"
      }
    },
    "ListPolicyPrincipals" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Lists the principals associated with the specified policy.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/policy-principals",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the ListPolicyPrincipals operation.</p>",
        "locationName" : null,
        "shape" : "ListPolicyPrincipalsRequest",
        "xmlNamespace" : null
      },
      "name" : "ListPolicyPrincipals",
      "output" : {
        "documentation" : "<p>The output from the ListPolicyPrincipals operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "ListPolicyPrincipalsResponse"
      }
    },
    "ListPolicyVersions" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Lists the versions of the specified policy and identifies the default version.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/policies/{policyName}/version",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the ListPolicyVersions operation.</p>",
        "locationName" : null,
        "shape" : "ListPolicyVersionsRequest",
        "xmlNamespace" : null
      },
      "name" : "ListPolicyVersions",
      "output" : {
        "documentation" : "<p>The output from the ListPolicyVersions operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "ListPolicyVersionsResponse"
      }
    },
    "ListPrincipalPolicies" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Lists the policies attached to the specified principal. If you use an Cognito identity, the ID must be in <a href=\"http://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html#API_GetCredentialsForIdentity_RequestSyntax\">AmazonCognito Identity format</a>.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/principal-policies",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the ListPrincipalPolicies operation.</p>",
        "locationName" : null,
        "shape" : "ListPrincipalPoliciesRequest",
        "xmlNamespace" : null
      },
      "name" : "ListPrincipalPolicies",
      "output" : {
        "documentation" : "<p>The output from the ListPrincipalPolicies operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "ListPrincipalPoliciesResponse"
      }
    },
    "ListPrincipalThings" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Lists the things associated with the specified principal.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      }, {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/principals/things",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the ListPrincipalThings operation.</p>",
        "locationName" : null,
        "shape" : "ListPrincipalThingsRequest",
        "xmlNamespace" : null
      },
      "name" : "ListPrincipalThings",
      "output" : {
        "documentation" : "<p>The output from the ListPrincipalThings operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "ListPrincipalThingsResponse"
      }
    },
    "ListThingPrincipals" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Lists the principals associated with the specified thing.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      }, {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/things/{thingName}/principals",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the ListThingPrincipal operation.</p>",
        "locationName" : null,
        "shape" : "ListThingPrincipalsRequest",
        "xmlNamespace" : null
      },
      "name" : "ListThingPrincipals",
      "output" : {
        "documentation" : "<p>The output from the ListThingPrincipals operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "ListThingPrincipalsResponse"
      }
    },
    "ListThingTypes" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Lists the existing thing types.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/thing-types",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the ListThingTypes operation.</p>",
        "locationName" : null,
        "shape" : "ListThingTypesRequest",
        "xmlNamespace" : null
      },
      "name" : "ListThingTypes",
      "output" : {
        "documentation" : "<p>The output for the ListThingTypes operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "ListThingTypesResponse"
      }
    },
    "ListThings" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Lists your things. Use the <b>attributeName</b> and <b>attributeValue</b> parameters to filter your things. For example, calling <code>ListThings</code> with attributeName=Color and attributeValue=Red retrieves all things in the registry that contain an attribute <b>Color</b> with the value <b>Red</b>. </p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/things",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the ListThings operation.</p>",
        "locationName" : null,
        "shape" : "ListThingsRequest",
        "xmlNamespace" : null
      },
      "name" : "ListThings",
      "output" : {
        "documentation" : "<p>The output from the ListThings operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "ListThingsResponse"
      }
    },
    "ListTopicRules" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Lists the rules for the specific topic.</p>",
      "errors" : [ {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      } ],
      "http" : {
        "method" : "GET",
        "requestUri" : "/rules",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the ListTopicRules operation.</p>",
        "locationName" : null,
        "shape" : "ListTopicRulesRequest",
        "xmlNamespace" : null
      },
      "name" : "ListTopicRules",
      "output" : {
        "documentation" : "<p>The output from the ListTopicRules operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "ListTopicRulesResponse"
      }
    },
    "RegisterCACertificate" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Registers a CA certificate with AWS IoT. This CA certificate can then be used to sign device certificates, which can be then registered with AWS IoT. You can register up to 10 CA certificates per AWS account that have the same subject field and public key. This enables you to have up to 10 certificate authorities sign your device certificates. If you have more than one CA certificate registered, make sure you pass the CA certificate when you register your device certificates with the RegisterCertificate API.</p>",
      "errors" : [ {
        "documentation" : "<p>The resource already exists.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 409
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceAlreadyExistsException"
      }, {
        "documentation" : "<p>The registration code is invalid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "RegistrationCodeValidationException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The certificate is invalid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "CertificateValidationException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>The number of attached entities exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 410
        },
        "exception" : true,
        "fault" : false,
        "shape" : "LimitExceededException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "POST",
        "requestUri" : "/cacertificate",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input to the RegisterCACertificate operation.</p>",
        "locationName" : null,
        "shape" : "RegisterCACertificateRequest",
        "xmlNamespace" : null
      },
      "name" : "RegisterCACertificate",
      "output" : {
        "documentation" : "<p>The output from the RegisterCACertificateResponse operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "RegisterCACertificateResponse"
      }
    },
    "RegisterCertificate" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Registers a device certificate with AWS IoT. If you have more than one CA certificate that has the same subject field, you must specify the CA certificate that was used to sign the device certificate being registered.</p>",
      "errors" : [ {
        "documentation" : "<p>The resource already exists.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 409
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceAlreadyExistsException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The certificate is invalid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "CertificateValidationException"
      }, {
        "documentation" : "<p>The certificate operation is not allowed.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 406
        },
        "exception" : true,
        "fault" : false,
        "shape" : "CertificateStateException"
      }, {
        "documentation" : "<p>Unable to verify the CA certificate used to sign the device certificate you are attempting to register. This is happens when you have registered more than one CA certificate that has the same subject field and public key.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 409
        },
        "exception" : true,
        "fault" : false,
        "shape" : "CertificateConflictException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "POST",
        "requestUri" : "/certificate/register",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input to the RegisterCertificate operation.</p>",
        "locationName" : null,
        "shape" : "RegisterCertificateRequest",
        "xmlNamespace" : null
      },
      "name" : "RegisterCertificate",
      "output" : {
        "documentation" : "<p>The output from the RegisterCertificate operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "RegisterCertificateResponse"
      }
    },
    "RejectCertificateTransfer" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Rejects a pending certificate transfer. After AWS IoT rejects a certificate transfer, the certificate status changes from <b>PENDING_TRANSFER</b> to <b>INACTIVE</b>.</p> <p>To check for pending certificate transfers, call <a>ListCertificates</a> to enumerate your certificates.</p> <p>This operation can only be called by the transfer destination. After it is called, the certificate will be returned to the source's account in the INACTIVE state.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>You can't revert the certificate transfer because the transfer is already complete.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 410
        },
        "exception" : true,
        "fault" : false,
        "shape" : "TransferAlreadyCompletedException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "PATCH",
        "requestUri" : "/reject-certificate-transfer/{certificateId}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the RejectCertificateTransfer operation.</p>",
        "locationName" : null,
        "shape" : "RejectCertificateTransferRequest",
        "xmlNamespace" : null
      },
      "name" : "RejectCertificateTransfer",
      "output" : null
    },
    "ReplaceTopicRule" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Replaces the specified rule. You must specify all parameters for the new rule. Creating rules is an administrator-level action. Any user who has permission to create rules will be able to access data processed by the rule.</p>",
      "errors" : [ {
        "documentation" : "<p>The Rule-SQL expression can't be parsed correctly.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "SqlParseException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      } ],
      "http" : {
        "method" : "PATCH",
        "requestUri" : "/rules/{ruleName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the ReplaceTopicRule operation.</p>",
        "locationName" : null,
        "shape" : "ReplaceTopicRuleRequest",
        "xmlNamespace" : null
      },
      "name" : "ReplaceTopicRule",
      "output" : null
    },
    "SetDefaultPolicyVersion" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Sets the specified version of the specified policy as the policy's default (operative) version. This action affects all certificates to which the policy is attached. To list the principals the policy is attached to, use the ListPrincipalPolicy API.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "PATCH",
        "requestUri" : "/policies/{policyName}/version/{policyVersionId}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the SetDefaultPolicyVersion operation.</p>",
        "locationName" : null,
        "shape" : "SetDefaultPolicyVersionRequest",
        "xmlNamespace" : null
      },
      "name" : "SetDefaultPolicyVersion",
      "output" : null
    },
    "SetLoggingOptions" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Sets the logging options.</p>",
      "errors" : [ {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      } ],
      "http" : {
        "method" : "POST",
        "requestUri" : "/loggingOptions",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the SetLoggingOptions operation.</p>",
        "locationName" : null,
        "shape" : "SetLoggingOptionsRequest",
        "xmlNamespace" : null
      },
      "name" : "SetLoggingOptions",
      "output" : null
    },
    "TransferCertificate" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Transfers the specified certificate to the specified AWS account.</p> <p>You can cancel the transfer until it is acknowledged by the recipient.</p> <p>No notification is sent to the transfer destination's account. It is up to the caller to notify the transfer target.</p> <p>The certificate being transferred must not be in the ACTIVE state. You can use the UpdateCertificate API to deactivate it.</p> <p>The certificate must not have any policies attached to it. You can use the DetachPrincipalPolicy API to detach them.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The certificate operation is not allowed.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 406
        },
        "exception" : true,
        "fault" : false,
        "shape" : "CertificateStateException"
      }, {
        "documentation" : "<p>You can't transfer the certificate because authorization policies are still attached.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 409
        },
        "exception" : true,
        "fault" : false,
        "shape" : "TransferConflictException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "PATCH",
        "requestUri" : "/transfer-certificate/{certificateId}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the TransferCertificate operation.</p>",
        "locationName" : null,
        "shape" : "TransferCertificateRequest",
        "xmlNamespace" : null
      },
      "name" : "TransferCertificate",
      "output" : {
        "documentation" : "<p>The output from the TransferCertificate operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "TransferCertificateResponse"
      }
    },
    "UpdateCACertificate" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Updates a registered CA certificate.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "PUT",
        "requestUri" : "/cacertificate/{caCertificateId}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input to the UpdateCACertificate operation.</p>",
        "locationName" : null,
        "shape" : "UpdateCACertificateRequest",
        "xmlNamespace" : null
      },
      "name" : "UpdateCACertificate",
      "output" : null
    },
    "UpdateCertificate" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Updates the status of the specified certificate. This operation is idempotent.</p> <p>Moving a certificate from the ACTIVE state (including REVOKED) will not disconnect currently connected devices, but these devices will be unable to reconnect.</p> <p>The ACTIVE state is required to authenticate devices connecting to AWS IoT using a certificate.</p>",
      "errors" : [ {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      }, {
        "documentation" : "<p>The certificate operation is not allowed.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 406
        },
        "exception" : true,
        "fault" : false,
        "shape" : "CertificateStateException"
      }, {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      } ],
      "http" : {
        "method" : "PUT",
        "requestUri" : "/certificates/{certificateId}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the UpdateCertificate operation.</p>",
        "locationName" : null,
        "shape" : "UpdateCertificateRequest",
        "xmlNamespace" : null
      },
      "name" : "UpdateCertificate",
      "output" : null
    },
    "UpdateThing" : {
      "authorizer" : null,
      "authtype" : "IAM",
      "deprecated" : false,
      "documentation" : "<p>Updates the data for a thing.</p>",
      "errors" : [ {
        "documentation" : "<p>The request is not valid.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 400
        },
        "exception" : true,
        "fault" : false,
        "shape" : "InvalidRequestException"
      }, {
        "documentation" : "<p>An exception thrown when the version of a thing passed to a command is different than the version specified with the --version parameter. </p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 409
        },
        "exception" : true,
        "fault" : false,
        "shape" : "VersionConflictException"
      }, {
        "documentation" : "<p>The rate exceeds the limit.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 429
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ThrottlingException"
      }, {
        "documentation" : "<p>You are not authorized to perform this operation.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 401
        },
        "exception" : true,
        "fault" : false,
        "shape" : "UnauthorizedException"
      }, {
        "documentation" : "<p>The service is temporarily unavailable.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 503
        },
        "exception" : true,
        "fault" : true,
        "shape" : "ServiceUnavailableException"
      }, {
        "documentation" : "<p>An unexpected error has occurred.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 500
        },
        "exception" : true,
        "fault" : true,
        "shape" : "InternalFailureException"
      }, {
        "documentation" : "<p>The specified resource does not exist.</p>",
        "error" : {
          "code" : null,
          "httpStatusCode" : 404
        },
        "exception" : true,
        "fault" : false,
        "shape" : "ResourceNotFoundException"
      } ],
      "http" : {
        "method" : "PATCH",
        "requestUri" : "/things/{thingName}",
        "responseCode" : null
      },
      "input" : {
        "documentation" : "<p>The input for the UpdateThing operation.</p>",
        "locationName" : null,
        "shape" : "UpdateThingRequest",
        "xmlNamespace" : null
      },
      "name" : "UpdateThing",
      "output" : {
        "documentation" : "<p>The output from the UpdateThing operation.</p>",
        "locationName" : null,
        "resultWrapper" : null,
        "shape" : "UpdateThingResponse"
      }
    }
  },
  "shapes" : {
    "AcceptCertificateTransferRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the AcceptCertificateTransfer operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "certificateId",
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "setAsActive" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies whether the certificate is active.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "setAsActive",
          "payload" : false,
          "queryName" : null,
          "shape" : "SetAsActive",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "certificateId" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "Action" : {
      "deprecated" : false,
      "documentation" : "<p>Describes the actions associated with a rule.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "cloudwatchAlarm" : {
          "deprecated" : false,
          "documentation" : "<p>Change the state of a CloudWatch alarm.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CloudwatchAlarmAction",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "cloudwatchMetric" : {
          "deprecated" : false,
          "documentation" : "<p>Capture a CloudWatch metric.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CloudwatchMetricAction",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "dynamoDB" : {
          "deprecated" : false,
          "documentation" : "<p>Write to a DynamoDB table.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DynamoDBAction",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "dynamoDBv2" : {
          "deprecated" : false,
          "documentation" : "<p>Write to a DynamoDB table. This is a new version of the DynamoDB action. It allows you to write each attribute in an MQTT message payload into a separate DynamoDB column.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DynamoDBv2Action",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "elasticsearch" : {
          "deprecated" : false,
          "documentation" : "<p>Write data to an Amazon Elasticsearch Service domain.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ElasticsearchAction",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "firehose" : {
          "deprecated" : false,
          "documentation" : "<p>Write to an Amazon Kinesis Firehose stream.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "FirehoseAction",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "kinesis" : {
          "deprecated" : false,
          "documentation" : "<p>Write data to an Amazon Kinesis stream.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "KinesisAction",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "lambda" : {
          "deprecated" : false,
          "documentation" : "<p>Invoke a Lambda function.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "LambdaAction",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "republish" : {
          "deprecated" : false,
          "documentation" : "<p>Publish to another MQTT topic.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "RepublishAction",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "s3" : {
          "deprecated" : false,
          "documentation" : "<p>Write to an Amazon S3 bucket.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "S3Action",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "sns" : {
          "deprecated" : false,
          "documentation" : "<p>Publish to an Amazon SNS topic.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "SnsAction",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "sqs" : {
          "deprecated" : false,
          "documentation" : "<p>Publish to an Amazon SQS queue.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "SqsAction",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ActionList" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 10,
      "member" : {
        "deprecated" : false,
        "documentation" : null,
        "flattened" : false,
        "idempotencyToken" : false,
        "jsonvalue" : false,
        "location" : null,
        "locationName" : null,
        "payload" : false,
        "queryName" : null,
        "shape" : "Action",
        "streaming" : false,
        "xmlNamespace" : null
      },
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "list",
      "value" : null,
      "wrapper" : false
    },
    "AlarmName" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "AllowAutoRegistration" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "boolean",
      "value" : null,
      "wrapper" : false
    },
    "AscendingOrder" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "boolean",
      "value" : null,
      "wrapper" : false
    },
    "AttachPrincipalPolicyRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the AttachPrincipalPolicy operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "policyName" : {
          "deprecated" : false,
          "documentation" : "<p>The policy name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "policyName",
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "principal" : {
          "deprecated" : false,
          "documentation" : "<p>The principal, which can be a certificate ARN (as returned from the CreateCertificate operation) or an Amazon Cognito ID.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "header",
          "locationName" : "x-amzn-iot-principal",
          "payload" : false,
          "queryName" : null,
          "shape" : "Principal",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "policyName", "principal" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "AttachThingPrincipalRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the AttachThingPrincipal operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "principal" : {
          "deprecated" : false,
          "documentation" : "<p>The principal, such as a certificate or other credential.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "header",
          "locationName" : "x-amzn-principal",
          "payload" : false,
          "queryName" : null,
          "shape" : "Principal",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "thingName",
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "thingName", "principal" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "AttachThingPrincipalResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the AttachThingPrincipal operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "AttributeName" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 128,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : "[a-zA-Z0-9_.,@/:#-]+",
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "AttributePayload" : {
      "deprecated" : false,
      "documentation" : "<p>The attribute payload.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "attributes" : {
          "deprecated" : false,
          "documentation" : "<p>A JSON string containing up to three key-value pair in JSON format. For example:</p> <p><code>{\\\"attributes\\\":{\\\"string1\\\":\\\"string2\\\"}})</code></p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Attributes",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "merge" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies whether the list of attributes provided in the <code>AttributePayload</code> is merged with the attributes stored in the registry, instead of overwriting them.</p> <p>To remove an attribute, call <code>UpdateThing</code> with an empty attribute value.</p> <note> <p>The <code>merge</code> attribute is only valid when calling <code>UpdateThing</code>.</p> </note>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Flag",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "AttributeValue" : {
      "deprecated" : false,
      "documentation" : "An attribute value for an Thing. An empty or null value in Update means that existing value for that attribute should be deleted. Empty and null values in create are ignored.",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 800,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : "[a-zA-Z0-9_.,@/:#-]*",
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "Attributes" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : {
        "deprecated" : false,
        "documentation" : null,
        "flattened" : false,
        "idempotencyToken" : false,
        "jsonvalue" : false,
        "location" : null,
        "locationName" : null,
        "payload" : false,
        "queryName" : null,
        "shape" : "AttributeName",
        "streaming" : false,
        "xmlNamespace" : null
      },
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "map",
      "value" : {
        "deprecated" : false,
        "documentation" : null,
        "flattened" : false,
        "idempotencyToken" : false,
        "jsonvalue" : false,
        "location" : null,
        "locationName" : null,
        "payload" : false,
        "queryName" : null,
        "shape" : "AttributeValue",
        "streaming" : false,
        "xmlNamespace" : null
      },
      "wrapper" : false
    },
    "AutoRegistrationStatus" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : [ "ENABLE", "DISABLE" ],
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "AwsAccountId" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : "[0-9]{12}",
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "AwsArn" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "AwsIotSqlVersion" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "Boolean" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "boolean",
      "value" : null,
      "wrapper" : false
    },
    "BucketName" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "CACertificate" : {
      "deprecated" : false,
      "documentation" : "<p>A CA certificate.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the CA certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the CA certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "creationDate" : {
          "deprecated" : false,
          "documentation" : "<p>The date the CA certificate was created.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DateType",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "status" : {
          "deprecated" : false,
          "documentation" : "<p>The status of the CA certificate. </p> <p>The status value REGISTER_INACTIVE is deprecated and should not be used.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CACertificateStatus",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CACertificateDescription" : {
      "deprecated" : false,
      "documentation" : "<p>Describes a CA certificate.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "autoRegistrationStatus" : {
          "deprecated" : false,
          "documentation" : "<p>Whether the CA certificate configured for auto registration of device certificates. Valid values are \"ENABLE\" and \"DISABLE\"</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AutoRegistrationStatus",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificateArn" : {
          "deprecated" : false,
          "documentation" : "<p>The CA certificate ARN.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The CA certificate ID.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificatePem" : {
          "deprecated" : false,
          "documentation" : "<p>The CA certificate data, in PEM format.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificatePem",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "creationDate" : {
          "deprecated" : false,
          "documentation" : "<p>The date the CA certificate was created.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DateType",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "ownedBy" : {
          "deprecated" : false,
          "documentation" : "<p>The owner of the CA certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsAccountId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "status" : {
          "deprecated" : false,
          "documentation" : "<p>The status of a CA certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CACertificateStatus",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CACertificateStatus" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : [ "ACTIVE", "INACTIVE" ],
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "CACertificates" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : {
        "deprecated" : false,
        "documentation" : null,
        "flattened" : false,
        "idempotencyToken" : false,
        "jsonvalue" : false,
        "location" : null,
        "locationName" : null,
        "payload" : false,
        "queryName" : null,
        "shape" : "CACertificate",
        "streaming" : false,
        "xmlNamespace" : null
      },
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "list",
      "value" : null,
      "wrapper" : false
    },
    "CancelCertificateTransferRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the CancelCertificateTransfer operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "certificateId",
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "certificateId" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CannedAccessControlList" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : [ "private", "public-read", "public-read-write", "aws-exec-read", "authenticated-read", "bucket-owner-read", "bucket-owner-full-control", "log-delivery-write" ],
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "Certificate" : {
      "deprecated" : false,
      "documentation" : "<p>Information about a certificate.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "creationDate" : {
          "deprecated" : false,
          "documentation" : "<p>The date and time the certificate was created.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DateType",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "status" : {
          "deprecated" : false,
          "documentation" : "<p>The status of the certificate.</p> <p>The status value REGISTER_INACTIVE is deprecated and should not be used.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateStatus",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CertificateArn" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "CertificateConflictException" : {
      "deprecated" : false,
      "documentation" : "<p>Unable to verify the CA certificate used to sign the device certificate you are attempting to register. This is happens when you have registered more than one CA certificate that has the same subject field and public key.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 409
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CertificateDescription" : {
      "deprecated" : false,
      "documentation" : "<p>Describes a certificate.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "caCertificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The certificate ID of the CA certificate used to sign this certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificateArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificatePem" : {
          "deprecated" : false,
          "documentation" : "<p>The certificate data, in PEM format.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificatePem",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "creationDate" : {
          "deprecated" : false,
          "documentation" : "<p>The date and time the certificate was created.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DateType",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "lastModifiedDate" : {
          "deprecated" : false,
          "documentation" : "<p>The date and time the certificate was last modified.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DateType",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "ownedBy" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the AWS account that owns the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsAccountId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "previousOwnedBy" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the AWS account of the previous owner of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsAccountId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "status" : {
          "deprecated" : false,
          "documentation" : "<p>The status of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateStatus",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "transferData" : {
          "deprecated" : false,
          "documentation" : "<p>The transfer data.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "TransferData",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CertificateId" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 64,
      "member" : null,
      "members" : { },
      "min" : 64,
      "pattern" : "(0x)?[a-fA-F0-9]+",
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "CertificatePem" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 65536,
      "member" : null,
      "members" : { },
      "min" : 1,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "CertificateSigningRequest" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 1,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "CertificateStateException" : {
      "deprecated" : false,
      "documentation" : "<p>The certificate operation is not allowed.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 406
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CertificateStatus" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : [ "ACTIVE", "INACTIVE", "REVOKED", "PENDING_TRANSFER", "REGISTER_INACTIVE", "PENDING_ACTIVATION" ],
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "CertificateValidationException" : {
      "deprecated" : false,
      "documentation" : "<p>The certificate is invalid.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 400
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>Additional information about the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "Certificates" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : {
        "deprecated" : false,
        "documentation" : null,
        "flattened" : false,
        "idempotencyToken" : false,
        "jsonvalue" : false,
        "location" : null,
        "locationName" : null,
        "payload" : false,
        "queryName" : null,
        "shape" : "Certificate",
        "streaming" : false,
        "xmlNamespace" : null
      },
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "list",
      "value" : null,
      "wrapper" : false
    },
    "ClientId" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "CloudwatchAlarmAction" : {
      "deprecated" : false,
      "documentation" : "<p>Describes an action that updates a CloudWatch alarm.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "alarmName" : {
          "deprecated" : false,
          "documentation" : "<p>The CloudWatch alarm name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AlarmName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "roleArn" : {
          "deprecated" : false,
          "documentation" : "<p>The IAM role that allows access to the CloudWatch alarm.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "stateReason" : {
          "deprecated" : false,
          "documentation" : "<p>The reason for the alarm change.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "StateReason",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "stateValue" : {
          "deprecated" : false,
          "documentation" : "<p>The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "StateValue",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "roleArn", "alarmName", "stateReason", "stateValue" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CloudwatchMetricAction" : {
      "deprecated" : false,
      "documentation" : "<p>Describes an action that captures a CloudWatch metric.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "metricName" : {
          "deprecated" : false,
          "documentation" : "<p>The CloudWatch metric name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "MetricName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "metricNamespace" : {
          "deprecated" : false,
          "documentation" : "<p>The CloudWatch metric namespace name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "MetricNamespace",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "metricTimestamp" : {
          "deprecated" : false,
          "documentation" : "<p>An optional <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp\">Unix timestamp</a>.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "MetricTimestamp",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "metricUnit" : {
          "deprecated" : false,
          "documentation" : "<p>The <a href=\"http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit\">metric unit</a> supported by CloudWatch.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "MetricUnit",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "metricValue" : {
          "deprecated" : false,
          "documentation" : "<p>The CloudWatch metric value.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "MetricValue",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "roleArn" : {
          "deprecated" : false,
          "documentation" : "<p>The IAM role that allows access to the CloudWatch metric.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsArn",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "roleArn", "metricNamespace", "metricName", "metricValue", "metricUnit" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CreateCertificateFromCsrRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the CreateCertificateFromCsr operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateSigningRequest" : {
          "deprecated" : false,
          "documentation" : "<p>The certificate signing request (CSR).</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateSigningRequest",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "setAsActive" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies whether the certificate is active.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "setAsActive",
          "payload" : false,
          "queryName" : null,
          "shape" : "SetAsActive",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "certificateSigningRequest" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CreateCertificateFromCsrResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the CreateCertificateFromCsr operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateArn" : {
          "deprecated" : false,
          "documentation" : "<p>The Amazon Resource Name (ARN) of the certificate. You can use the ARN as a principal for policy operations.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the certificate. Certificate management operations only take a certificateId.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificatePem" : {
          "deprecated" : false,
          "documentation" : "<p>The certificate data, in PEM format.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificatePem",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CreateKeysAndCertificateRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the CreateKeysAndCertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "setAsActive" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies whether the certificate is active.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "setAsActive",
          "payload" : false,
          "queryName" : null,
          "shape" : "SetAsActive",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CreateKeysAndCertificateResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output of the CreateKeysAndCertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the certificate. AWS IoT issues a default subject name for the certificate (for example, AWS IoT Certificate).</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificatePem" : {
          "deprecated" : false,
          "documentation" : "<p>The certificate data, in PEM format.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificatePem",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "keyPair" : {
          "deprecated" : false,
          "documentation" : "<p>The generated key pair.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "KeyPair",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CreatePolicyRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the CreatePolicy operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "policyDocument" : {
          "deprecated" : false,
          "documentation" : "<p>The JSON document that describes the policy. <b>policyDocument</b> must have a minimum length of 1, with a maximum length of 2048, excluding whitespace.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyDocument",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyName" : {
          "deprecated" : false,
          "documentation" : "<p>The policy name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "policyName",
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "policyName", "policyDocument" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CreatePolicyResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the CreatePolicy operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "policyArn" : {
          "deprecated" : false,
          "documentation" : "<p>The policy ARN.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyDocument" : {
          "deprecated" : false,
          "documentation" : "<p>The JSON document that describes the policy.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyDocument",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyName" : {
          "deprecated" : false,
          "documentation" : "<p>The policy name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyVersionId" : {
          "deprecated" : false,
          "documentation" : "<p>The policy version ID.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyVersionId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CreatePolicyVersionRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the CreatePolicyVersion operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "policyDocument" : {
          "deprecated" : false,
          "documentation" : "<p>The JSON document that describes the policy. Minimum length of 1. Maximum length of 2048, excluding whitespaces</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyDocument",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyName" : {
          "deprecated" : false,
          "documentation" : "<p>The policy name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "policyName",
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "setAsDefault" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies whether the policy version is set as the default. When this parameter is true, the new policy version becomes the operative version (that is, the version that is in effect for the certificates to which the policy is attached).</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "setAsDefault",
          "payload" : false,
          "queryName" : null,
          "shape" : "SetAsDefault",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "policyName", "policyDocument" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CreatePolicyVersionResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output of the CreatePolicyVersion operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "isDefaultVersion" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies whether the policy version is the default.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "IsDefaultVersion",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyArn" : {
          "deprecated" : false,
          "documentation" : "<p>The policy ARN.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyDocument" : {
          "deprecated" : false,
          "documentation" : "<p>The JSON document that describes the policy.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyDocument",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyVersionId" : {
          "deprecated" : false,
          "documentation" : "<p>The policy version ID.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyVersionId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CreateThingRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the CreateThing operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "attributePayload" : {
          "deprecated" : false,
          "documentation" : "<p>The attribute payload, which consists of up to three name/value pairs in a JSON document. For example:</p> <p><code>{\\\"attributes\\\":{\\\"string1\\\":\\\"string2\\\"}})</code></p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AttributePayload",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing to create.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "thingName",
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingTypeName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing type associated with the new thing.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "thingName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CreateThingResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output of the CreateThing operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "thingArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the new thing.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the new thing.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CreateThingTypeRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the CreateThingType operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "thingTypeName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing type.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "thingTypeName",
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingTypeProperties" : {
          "deprecated" : false,
          "documentation" : "<p>The ThingTypeProperties for the thing type to create. It contains information about the new thing type including a description, and a list of searchable thing attribute names.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeProperties",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "thingTypeName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CreateThingTypeResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output of the CreateThingType operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "thingTypeArn" : {
          "deprecated" : false,
          "documentation" : "<p>The Amazon Resource Name (ARN) of the thing type.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingTypeName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing type.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CreateTopicRuleRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the CreateTopicRule operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "ruleName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the rule.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "ruleName",
          "payload" : false,
          "queryName" : null,
          "shape" : "RuleName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "topicRulePayload" : {
          "deprecated" : false,
          "documentation" : "<p>The rule payload.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "TopicRulePayload",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : "topicRulePayload",
      "required" : [ "ruleName", "topicRulePayload" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "CreatedAtDate" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "timestamp",
      "value" : null,
      "wrapper" : false
    },
    "CreationDate" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "timestamp",
      "value" : null,
      "wrapper" : false
    },
    "DateType" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "timestamp",
      "value" : null,
      "wrapper" : false
    },
    "DeleteCACertificateRequest" : {
      "deprecated" : false,
      "documentation" : "<p>Input for the DeleteCACertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the certificate to delete.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "caCertificateId",
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "certificateId" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DeleteCACertificateResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output for the DeleteCACertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DeleteCertificateRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DeleteCertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "certificateId",
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "certificateId" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DeleteConflictException" : {
      "deprecated" : false,
      "documentation" : "<p>You can't delete the resource because it is attached to one or more resources.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 409
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DeletePolicyRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DeletePolicy operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "policyName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the policy to delete.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "policyName",
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "policyName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DeletePolicyVersionRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DeletePolicyVersion operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "policyName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the policy.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "policyName",
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyVersionId" : {
          "deprecated" : false,
          "documentation" : "<p>The policy version ID.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "policyVersionId",
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyVersionId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "policyName", "policyVersionId" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DeleteRegistrationCodeRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DeleteRegistrationCode operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DeleteRegistrationCodeResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output for the DeleteRegistrationCode operation. </p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DeleteThingRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DeleteThing operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "expectedVersion" : {
          "deprecated" : false,
          "documentation" : "<p>The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>DeleteThing</code> request is rejected with a <code>VersionConflictException</code>.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "expectedVersion",
          "payload" : false,
          "queryName" : null,
          "shape" : "OptionalVersion",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing to delete.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "thingName",
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "thingName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DeleteThingResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output of the DeleteThing operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DeleteThingTypeRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DeleteThingType operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "thingTypeName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing type.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "thingTypeName",
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "thingTypeName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DeleteThingTypeResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output for the DeleteThingType operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DeleteTopicRuleRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DeleteTopicRule operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "ruleName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the rule.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "ruleName",
          "payload" : false,
          "queryName" : null,
          "shape" : "RuleName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "ruleName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DeliveryStreamName" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "DeprecateThingTypeRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DeprecateThingType operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "thingTypeName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing type to deprecate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "thingTypeName",
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "undoDeprecate" : {
          "deprecated" : false,
          "documentation" : "<p>Whether to undeprecate a deprecated thing type. If <b>true</b>, the thing type will not be deprecated anymore and you can associate it with things.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "UndoDeprecate",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "thingTypeName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DeprecateThingTypeResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output for the DeprecateThingType operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DeprecationDate" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "timestamp",
      "value" : null,
      "wrapper" : false
    },
    "DescribeCACertificateRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DescribeCACertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The CA certificate identifier.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "caCertificateId",
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "certificateId" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DescribeCACertificateResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the DescribeCACertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateDescription" : {
          "deprecated" : false,
          "documentation" : "<p>The CA certificate description.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CACertificateDescription",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DescribeCertificateRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DescribeCertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "certificateId",
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "certificateId" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DescribeCertificateResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output of the DescribeCertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateDescription" : {
          "deprecated" : false,
          "documentation" : "<p>The description of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateDescription",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DescribeEndpointRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DescribeEndpoint operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DescribeEndpointResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the DescribeEndpoint operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "endpointAddress" : {
          "deprecated" : false,
          "documentation" : "<p>The endpoint. The format of the endpoint is as follows: <i>identifier</i>.iot.<i>region</i>.amazonaws.com.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "EndpointAddress",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DescribeThingRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DescribeThing operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "thingName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "thingName",
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "thingName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DescribeThingResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the DescribeThing operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "attributes" : {
          "deprecated" : false,
          "documentation" : "<p>The thing attributes.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Attributes",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "defaultClientId" : {
          "deprecated" : false,
          "documentation" : "<p>The default client ID.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ClientId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingTypeName" : {
          "deprecated" : false,
          "documentation" : "<p>The thing type name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "version" : {
          "deprecated" : false,
          "documentation" : "<p>The current version of the thing record in the registry.</p> <note> <p>To avoid unintentional changes to the information in the registry, you can pass the version information in the <code>expectedVersion</code> parameter of the <code>UpdateThing</code> and <code>DeleteThing</code> calls.</p> </note>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Version",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DescribeThingTypeRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DescribeThingType operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "thingTypeName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing type.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "thingTypeName",
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "thingTypeName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DescribeThingTypeResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output for the DescribeThingType operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "thingTypeMetadata" : {
          "deprecated" : false,
          "documentation" : null,
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeMetadata",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingTypeName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing type.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingTypeProperties" : {
          "deprecated" : false,
          "documentation" : "<p>The ThingTypeProperties contains information about the thing type including description, and a list of searchable thing attribute names.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeProperties",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "Description" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "DetachPrincipalPolicyRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DetachPrincipalPolicy operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "policyName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the policy to detach.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "policyName",
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "principal" : {
          "deprecated" : false,
          "documentation" : "<p>The principal.</p> <p>If the principal is a certificate, specify the certificate ARN. If the principal is an Amazon Cognito identity, specify the identity ID.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "header",
          "locationName" : "x-amzn-iot-principal",
          "payload" : false,
          "queryName" : null,
          "shape" : "Principal",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "policyName", "principal" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DetachThingPrincipalRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DetachThingPrincipal operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "principal" : {
          "deprecated" : false,
          "documentation" : "<p>If the principal is a certificate, this value must be ARN of the certificate. If the principal is an Amazon Cognito identity, this value must be the ID of the Amazon Cognito identity.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "header",
          "locationName" : "x-amzn-principal",
          "payload" : false,
          "queryName" : null,
          "shape" : "Principal",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "thingName",
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "thingName", "principal" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DetachThingPrincipalResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the DetachThingPrincipal operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DisableTopicRuleRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DisableTopicRuleRequest operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "ruleName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the rule to disable.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "ruleName",
          "payload" : false,
          "queryName" : null,
          "shape" : "RuleName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "ruleName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DynamoDBAction" : {
      "deprecated" : false,
      "documentation" : "<p>Describes an action to write to a DynamoDB table.</p> <p>The <code>tableName</code>, <code>hashKeyField</code>, and <code>rangeKeyField</code> values must match the values used when you created the table.</p> <p>The <code>hashKeyValue</code> and <code>rangeKeyvalue</code> fields use a substitution template syntax. These templates provide data at runtime. The syntax is as follows: ${<i>sql-expression</i>}.</p> <p>You can specify any valid expression in a WHERE or SELECT clause, including JSON properties, comparisons, calculations, and functions. For example, the following field uses the third level of the topic:</p> <p><code>\"hashKeyValue\": \"${topic(3)}\"</code></p> <p>The following field uses the timestamp:</p> <p><code>\"rangeKeyValue\": \"${timestamp()}\"</code></p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "hashKeyField" : {
          "deprecated" : false,
          "documentation" : "<p>The hash key name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "HashKeyField",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "hashKeyType" : {
          "deprecated" : false,
          "documentation" : "<p>The hash key type. Valid values are \"STRING\" or \"NUMBER\"</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DynamoKeyType",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "hashKeyValue" : {
          "deprecated" : false,
          "documentation" : "<p>The hash key value.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "HashKeyValue",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "operation" : {
          "deprecated" : false,
          "documentation" : "<p>The type of operation to be performed. This follows the substitution template, so it can be <code>${operation}</code>, but the substitution must result in one of the following: <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DynamoOperation",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "payloadField" : {
          "deprecated" : false,
          "documentation" : "<p>The action payload. This name can be customized.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PayloadField",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "rangeKeyField" : {
          "deprecated" : false,
          "documentation" : "<p>The range key name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "RangeKeyField",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "rangeKeyType" : {
          "deprecated" : false,
          "documentation" : "<p>The range key type. Valid values are \"STRING\" or \"NUMBER\"</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DynamoKeyType",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "rangeKeyValue" : {
          "deprecated" : false,
          "documentation" : "<p>The range key value.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "RangeKeyValue",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "roleArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the IAM role that grants access to the DynamoDB table.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "tableName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the DynamoDB table.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "TableName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "tableName", "roleArn", "hashKeyField", "hashKeyValue" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DynamoDBv2Action" : {
      "deprecated" : false,
      "documentation" : "<p>Describes an action to write to a DynamoDB table.</p> <p>This DynamoDB action writes each attribute in the message payload into it's own column in the DynamoDB table.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "putItem" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies the DynamoDB table to which the message data will be written. For example:</p> <p><code>{ \"dynamoDBv2\": { \"roleArn\": \"aws:iam:12341251:my-role\" \"putItem\": { \"tableName\": \"my-table\" } } }</code></p> <p>Each attribute in the message payload will be written to a separate column in the DynamoDB database.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PutItemInput",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "roleArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the IAM role that grants access to the DynamoDB table.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsArn",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "DynamoKeyType" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : [ "STRING", "NUMBER" ],
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "DynamoOperation" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "ElasticsearchAction" : {
      "deprecated" : false,
      "documentation" : "<p>Describes an action that writes data to an Amazon Elasticsearch Service domain.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "endpoint" : {
          "deprecated" : false,
          "documentation" : "<p>The endpoint of your Elasticsearch domain.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ElasticsearchEndpoint",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "id" : {
          "deprecated" : false,
          "documentation" : "<p>The unique identifier for the document you are storing.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ElasticsearchId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "index" : {
          "deprecated" : false,
          "documentation" : "<p>The Elasticsearch index where you want to store your data.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ElasticsearchIndex",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "roleArn" : {
          "deprecated" : false,
          "documentation" : "<p>The IAM role ARN that has access to Elasticsearch.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "type" : {
          "deprecated" : false,
          "documentation" : "<p>The type of document you are storing.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ElasticsearchType",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "roleArn", "endpoint", "index", "type", "id" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ElasticsearchEndpoint" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : "https?://.*",
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "ElasticsearchId" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "ElasticsearchIndex" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "ElasticsearchType" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "EnableTopicRuleRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the EnableTopicRuleRequest operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "ruleName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the topic rule to enable.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "ruleName",
          "payload" : false,
          "queryName" : null,
          "shape" : "RuleName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "ruleName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "EndpointAddress" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "FirehoseAction" : {
      "deprecated" : false,
      "documentation" : "<p>Describes an action that writes data to an Amazon Kinesis Firehose stream.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "deliveryStreamName" : {
          "deprecated" : false,
          "documentation" : "<p>The delivery stream name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DeliveryStreamName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "roleArn" : {
          "deprecated" : false,
          "documentation" : "<p>The IAM role that grants access to the Amazon Kinesis Firehost stream.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "separator" : {
          "deprecated" : false,
          "documentation" : "<p>A character separator that will be used to separate records written to the Firehose stream. Valid values are: '\\n' (newline), '\\t' (tab), '\\r\\n' (Windows newline), ',' (comma).</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "FirehoseSeparator",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "roleArn", "deliveryStreamName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "FirehoseSeparator" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : "([\\n\\t])|(\\r\\n)|(,)",
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "Flag" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "boolean",
      "value" : null,
      "wrapper" : false
    },
    "FunctionArn" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "GetLoggingOptionsRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the GetLoggingOptions operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "GetLoggingOptionsResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the GetLoggingOptions operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "logLevel" : {
          "deprecated" : false,
          "documentation" : "<p>The logging level.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "LogLevel",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "roleArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the IAM role that grants access.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsArn",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "GetPolicyRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the GetPolicy operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "policyName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the policy.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "policyName",
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "policyName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "GetPolicyResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the GetPolicy operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "defaultVersionId" : {
          "deprecated" : false,
          "documentation" : "<p>The default policy version ID.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyVersionId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyArn" : {
          "deprecated" : false,
          "documentation" : "<p>The policy ARN.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyDocument" : {
          "deprecated" : false,
          "documentation" : "<p>The JSON document that describes the policy.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyDocument",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyName" : {
          "deprecated" : false,
          "documentation" : "<p>The policy name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "GetPolicyVersionRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the GetPolicyVersion operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "policyName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the policy.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "policyName",
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyVersionId" : {
          "deprecated" : false,
          "documentation" : "<p>The policy version ID.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "policyVersionId",
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyVersionId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "policyName", "policyVersionId" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "GetPolicyVersionResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the GetPolicyVersion operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "isDefaultVersion" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies whether the policy version is the default.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "IsDefaultVersion",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyArn" : {
          "deprecated" : false,
          "documentation" : "<p>The policy ARN.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyDocument" : {
          "deprecated" : false,
          "documentation" : "<p>The JSON document that describes the policy.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyDocument",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyName" : {
          "deprecated" : false,
          "documentation" : "<p>The policy name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyVersionId" : {
          "deprecated" : false,
          "documentation" : "<p>The policy version ID.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyVersionId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "GetRegistrationCodeRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input to the GetRegistrationCode operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "GetRegistrationCodeResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the GetRegistrationCode operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "registrationCode" : {
          "deprecated" : false,
          "documentation" : "<p>The CA certificate registration code.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "RegistrationCode",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "GetTopicRuleRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the GetTopicRule operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "ruleName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the rule.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "ruleName",
          "payload" : false,
          "queryName" : null,
          "shape" : "RuleName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "ruleName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "GetTopicRuleResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the GetTopicRule operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "rule" : {
          "deprecated" : false,
          "documentation" : "<p>The rule.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "TopicRule",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "ruleArn" : {
          "deprecated" : false,
          "documentation" : "<p>The rule ARN.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "RuleArn",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "HashKeyField" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "HashKeyValue" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "InternalException" : {
      "deprecated" : false,
      "documentation" : "<p>An unexpected error has occurred.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 500
      },
      "exception" : true,
      "fault" : true,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "InternalFailureException" : {
      "deprecated" : false,
      "documentation" : "<p>An unexpected error has occurred.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 500
      },
      "exception" : true,
      "fault" : true,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "InvalidRequestException" : {
      "deprecated" : false,
      "documentation" : "<p>The request is not valid.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 400
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "IsDefaultVersion" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "boolean",
      "value" : null,
      "wrapper" : false
    },
    "IsDisabled" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "boolean",
      "value" : null,
      "wrapper" : false
    },
    "Key" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "KeyPair" : {
      "deprecated" : false,
      "documentation" : "<p>Describes a key pair.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "PrivateKey" : {
          "deprecated" : false,
          "documentation" : "<p>The private key.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PrivateKey",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "PublicKey" : {
          "deprecated" : false,
          "documentation" : "<p>The public key.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PublicKey",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "KinesisAction" : {
      "deprecated" : false,
      "documentation" : "<p>Describes an action to write data to an Amazon Kinesis stream.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "partitionKey" : {
          "deprecated" : false,
          "documentation" : "<p>The partition key.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PartitionKey",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "roleArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the IAM role that grants access to the Amazon Kinesis stream.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "streamName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the Amazon Kinesis stream.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "StreamName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "roleArn", "streamName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "LambdaAction" : {
      "deprecated" : false,
      "documentation" : "<p>Describes an action to invoke a Lambda function.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "functionArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the Lambda function.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "FunctionArn",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "functionArn" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "LimitExceededException" : {
      "deprecated" : false,
      "documentation" : "<p>The number of attached entities exceeds the limit.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 410
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListCACertificatesRequest" : {
      "deprecated" : false,
      "documentation" : "<p>Input for the ListCACertificates operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "ascendingOrder" : {
          "deprecated" : false,
          "documentation" : "<p>Determines the order of the results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "isAscendingOrder",
          "payload" : false,
          "queryName" : null,
          "shape" : "AscendingOrder",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "marker" : {
          "deprecated" : false,
          "documentation" : "<p>The marker for the next set of results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "marker",
          "payload" : false,
          "queryName" : null,
          "shape" : "Marker",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "pageSize" : {
          "deprecated" : false,
          "documentation" : "<p>The result page size.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "pageSize",
          "payload" : false,
          "queryName" : null,
          "shape" : "PageSize",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListCACertificatesResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the ListCACertificates operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificates" : {
          "deprecated" : false,
          "documentation" : "<p>The CA certificates registered in your AWS account.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CACertificates",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "nextMarker" : {
          "deprecated" : false,
          "documentation" : "<p>The current position within the list of CA certificates.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Marker",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListCertificatesByCARequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input to the ListCertificatesByCA operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "ascendingOrder" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "isAscendingOrder",
          "payload" : false,
          "queryName" : null,
          "shape" : "AscendingOrder",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "caCertificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the CA certificate. This operation will list all registered device certificate that were signed by this CA certificate. </p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "caCertificateId",
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "marker" : {
          "deprecated" : false,
          "documentation" : "<p>The marker for the next set of results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "marker",
          "payload" : false,
          "queryName" : null,
          "shape" : "Marker",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "pageSize" : {
          "deprecated" : false,
          "documentation" : "<p>The result page size.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "pageSize",
          "payload" : false,
          "queryName" : null,
          "shape" : "PageSize",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "caCertificateId" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListCertificatesByCAResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output of the ListCertificatesByCA operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificates" : {
          "deprecated" : false,
          "documentation" : "<p>The device certificates signed by the specified CA certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Certificates",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "nextMarker" : {
          "deprecated" : false,
          "documentation" : "<p>The marker for the next set of results, or null if there are no additional results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Marker",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListCertificatesRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the ListCertificates operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "ascendingOrder" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "isAscendingOrder",
          "payload" : false,
          "queryName" : null,
          "shape" : "AscendingOrder",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "marker" : {
          "deprecated" : false,
          "documentation" : "<p>The marker for the next set of results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "marker",
          "payload" : false,
          "queryName" : null,
          "shape" : "Marker",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "pageSize" : {
          "deprecated" : false,
          "documentation" : "<p>The result page size.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "pageSize",
          "payload" : false,
          "queryName" : null,
          "shape" : "PageSize",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListCertificatesResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output of the ListCertificates operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificates" : {
          "deprecated" : false,
          "documentation" : "<p>The descriptions of the certificates.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Certificates",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "nextMarker" : {
          "deprecated" : false,
          "documentation" : "<p>The marker for the next set of results, or null if there are no additional results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Marker",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListOutgoingCertificatesRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input to the ListOutgoingCertificates operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "ascendingOrder" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "isAscendingOrder",
          "payload" : false,
          "queryName" : null,
          "shape" : "AscendingOrder",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "marker" : {
          "deprecated" : false,
          "documentation" : "<p>The marker for the next set of results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "marker",
          "payload" : false,
          "queryName" : null,
          "shape" : "Marker",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "pageSize" : {
          "deprecated" : false,
          "documentation" : "<p>The result page size.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "pageSize",
          "payload" : false,
          "queryName" : null,
          "shape" : "PageSize",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListOutgoingCertificatesResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the ListOutgoingCertificates operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "nextMarker" : {
          "deprecated" : false,
          "documentation" : "<p>The marker for the next set of results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Marker",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "outgoingCertificates" : {
          "deprecated" : false,
          "documentation" : "<p>The certificates that are being transfered but not yet accepted.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "OutgoingCertificates",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListPoliciesRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the ListPolicies operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "ascendingOrder" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies the order for results. If true, the results are returned in ascending creation order.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "isAscendingOrder",
          "payload" : false,
          "queryName" : null,
          "shape" : "AscendingOrder",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "marker" : {
          "deprecated" : false,
          "documentation" : "<p>The marker for the next set of results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "marker",
          "payload" : false,
          "queryName" : null,
          "shape" : "Marker",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "pageSize" : {
          "deprecated" : false,
          "documentation" : "<p>The result page size.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "pageSize",
          "payload" : false,
          "queryName" : null,
          "shape" : "PageSize",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListPoliciesResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the ListPolicies operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "nextMarker" : {
          "deprecated" : false,
          "documentation" : "<p>The marker for the next set of results, or null if there are no additional results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Marker",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policies" : {
          "deprecated" : false,
          "documentation" : "<p>The descriptions of the policies.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Policies",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListPolicyPrincipalsRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the ListPolicyPrincipals operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "ascendingOrder" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies the order for results. If true, the results are returned in ascending creation order.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "isAscendingOrder",
          "payload" : false,
          "queryName" : null,
          "shape" : "AscendingOrder",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "marker" : {
          "deprecated" : false,
          "documentation" : "<p>The marker for the next set of results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "marker",
          "payload" : false,
          "queryName" : null,
          "shape" : "Marker",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "pageSize" : {
          "deprecated" : false,
          "documentation" : "<p>The result page size.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "pageSize",
          "payload" : false,
          "queryName" : null,
          "shape" : "PageSize",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyName" : {
          "deprecated" : false,
          "documentation" : "<p>The policy name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "header",
          "locationName" : "x-amzn-iot-policy",
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "policyName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListPolicyPrincipalsResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the ListPolicyPrincipals operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "nextMarker" : {
          "deprecated" : false,
          "documentation" : "<p>The marker for the next set of results, or null if there are no additional results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Marker",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "principals" : {
          "deprecated" : false,
          "documentation" : "<p>The descriptions of the principals.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Principals",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListPolicyVersionsRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the ListPolicyVersions operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "policyName" : {
          "deprecated" : false,
          "documentation" : "<p>The policy name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "policyName",
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "policyName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListPolicyVersionsResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the ListPolicyVersions operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "policyVersions" : {
          "deprecated" : false,
          "documentation" : "<p>The policy versions.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyVersions",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListPrincipalPoliciesRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the ListPrincipalPolicies operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "ascendingOrder" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies the order for results. If true, results are returned in ascending creation order.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "isAscendingOrder",
          "payload" : false,
          "queryName" : null,
          "shape" : "AscendingOrder",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "marker" : {
          "deprecated" : false,
          "documentation" : "<p>The marker for the next set of results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "marker",
          "payload" : false,
          "queryName" : null,
          "shape" : "Marker",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "pageSize" : {
          "deprecated" : false,
          "documentation" : "<p>The result page size.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "pageSize",
          "payload" : false,
          "queryName" : null,
          "shape" : "PageSize",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "principal" : {
          "deprecated" : false,
          "documentation" : "<p>The principal.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "header",
          "locationName" : "x-amzn-iot-principal",
          "payload" : false,
          "queryName" : null,
          "shape" : "Principal",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "principal" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListPrincipalPoliciesResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the ListPrincipalPolicies operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "nextMarker" : {
          "deprecated" : false,
          "documentation" : "<p>The marker for the next set of results, or null if there are no additional results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Marker",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policies" : {
          "deprecated" : false,
          "documentation" : "<p>The policies.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Policies",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListPrincipalThingsRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the ListPrincipalThings operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "maxResults" : {
          "deprecated" : false,
          "documentation" : "<p>The maximum number of results to return in this operation.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "maxResults",
          "payload" : false,
          "queryName" : null,
          "shape" : "MaxResults",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "nextToken" : {
          "deprecated" : false,
          "documentation" : "<p>The token for the next set of results, or <b>null</b> if there are no additional results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "nextToken",
          "payload" : false,
          "queryName" : null,
          "shape" : "NextToken",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "principal" : {
          "deprecated" : false,
          "documentation" : "<p>The principal.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "header",
          "locationName" : "x-amzn-principal",
          "payload" : false,
          "queryName" : null,
          "shape" : "Principal",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "principal" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListPrincipalThingsResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the ListPrincipalThings operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "nextToken" : {
          "deprecated" : false,
          "documentation" : "<p>The token for the next set of results, or <b>null</b> if there are no additional results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "NextToken",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "things" : {
          "deprecated" : false,
          "documentation" : "<p>The things.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingNameList",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListThingPrincipalsRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the ListThingPrincipal operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "thingName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "thingName",
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "thingName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListThingPrincipalsResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the ListThingPrincipals operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "principals" : {
          "deprecated" : false,
          "documentation" : "<p>The principals associated with the thing.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Principals",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListThingTypesRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the ListThingTypes operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "maxResults" : {
          "deprecated" : false,
          "documentation" : "<p>The maximum number of results to return in this operation.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "maxResults",
          "payload" : false,
          "queryName" : null,
          "shape" : "MaxResults",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "nextToken" : {
          "deprecated" : false,
          "documentation" : "<p>The token for the next set of results, or <b>null</b> if there are no additional results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "nextToken",
          "payload" : false,
          "queryName" : null,
          "shape" : "NextToken",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingTypeName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing type.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "thingTypeName",
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListThingTypesResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output for the ListThingTypes operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "nextToken" : {
          "deprecated" : false,
          "documentation" : "<p>The token for the next set of results, or <b>null</b> if there are no additional results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "NextToken",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingTypes" : {
          "deprecated" : false,
          "documentation" : "<p>The thing types.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeList",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListThingsRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the ListThings operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "attributeName" : {
          "deprecated" : false,
          "documentation" : "<p>The attribute name used to search for things.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "attributeName",
          "payload" : false,
          "queryName" : null,
          "shape" : "AttributeName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "attributeValue" : {
          "deprecated" : false,
          "documentation" : "<p>The attribute value used to search for things.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "attributeValue",
          "payload" : false,
          "queryName" : null,
          "shape" : "AttributeValue",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "maxResults" : {
          "deprecated" : false,
          "documentation" : "<p>The maximum number of results to return in this operation.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "maxResults",
          "payload" : false,
          "queryName" : null,
          "shape" : "MaxResults",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "nextToken" : {
          "deprecated" : false,
          "documentation" : "<p>The token for the next set of results, or <b>null</b> if there are no additional results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "nextToken",
          "payload" : false,
          "queryName" : null,
          "shape" : "NextToken",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingTypeName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing type used to search for things.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "thingTypeName",
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListThingsResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the ListThings operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "nextToken" : {
          "deprecated" : false,
          "documentation" : "<p>The token for the next set of results, or <b>null</b> if there are no additional results.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "NextToken",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "things" : {
          "deprecated" : false,
          "documentation" : "<p>The things.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingAttributeList",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListTopicRulesRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the ListTopicRules operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "maxResults" : {
          "deprecated" : false,
          "documentation" : "<p>The maximum number of results to return.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "maxResults",
          "payload" : false,
          "queryName" : null,
          "shape" : "MaxResults",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "nextToken" : {
          "deprecated" : false,
          "documentation" : "<p>A token used to retrieve the next value.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "nextToken",
          "payload" : false,
          "queryName" : null,
          "shape" : "NextToken",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "ruleDisabled" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies whether the rule is disabled.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "ruleDisabled",
          "payload" : false,
          "queryName" : null,
          "shape" : "IsDisabled",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "topic" : {
          "deprecated" : false,
          "documentation" : "<p>The topic.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "topic",
          "payload" : false,
          "queryName" : null,
          "shape" : "Topic",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ListTopicRulesResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the ListTopicRules operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "nextToken" : {
          "deprecated" : false,
          "documentation" : "<p>A token used to retrieve the next value.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "NextToken",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "rules" : {
          "deprecated" : false,
          "documentation" : "<p>The rules.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "TopicRuleList",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "LogLevel" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : [ "DEBUG", "INFO", "ERROR", "WARN", "DISABLED" ],
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "LoggingOptionsPayload" : {
      "deprecated" : false,
      "documentation" : "<p>Describes the logging options payload.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "logLevel" : {
          "deprecated" : false,
          "documentation" : "<p>The logging level.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "LogLevel",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "roleArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the IAM role that grants access.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsArn",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "roleArn" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "MalformedPolicyException" : {
      "deprecated" : false,
      "documentation" : "<p>The policy documentation is not valid.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 400
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "Marker" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "MaxResults" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 10000,
      "member" : null,
      "members" : { },
      "min" : 1,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "integer",
      "value" : null,
      "wrapper" : false
    },
    "Message" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 128,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "MessageFormat" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : [ "RAW", "JSON" ],
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "MetricName" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "MetricNamespace" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "MetricTimestamp" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "MetricUnit" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "MetricValue" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "NextToken" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "OptionalVersion" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "long",
      "value" : null,
      "wrapper" : false
    },
    "OutgoingCertificate" : {
      "deprecated" : false,
      "documentation" : "<p>A certificate that has been transfered but not yet accepted.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateArn" : {
          "deprecated" : false,
          "documentation" : "<p>The certificate ARN.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The certificate ID.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "creationDate" : {
          "deprecated" : false,
          "documentation" : "<p>The certificate creation date.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DateType",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "transferDate" : {
          "deprecated" : false,
          "documentation" : "<p>The date the transfer was initiated.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DateType",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "transferMessage" : {
          "deprecated" : false,
          "documentation" : "<p>The transfer message.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Message",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "transferredTo" : {
          "deprecated" : false,
          "documentation" : "<p>The AWS account to which the transfer was made.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsAccountId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "OutgoingCertificates" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : {
        "deprecated" : false,
        "documentation" : null,
        "flattened" : false,
        "idempotencyToken" : false,
        "jsonvalue" : false,
        "location" : null,
        "locationName" : null,
        "payload" : false,
        "queryName" : null,
        "shape" : "OutgoingCertificate",
        "streaming" : false,
        "xmlNamespace" : null
      },
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "list",
      "value" : null,
      "wrapper" : false
    },
    "PageSize" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 250,
      "member" : null,
      "members" : { },
      "min" : 1,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "integer",
      "value" : null,
      "wrapper" : false
    },
    "PartitionKey" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "PayloadField" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "Policies" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : {
        "deprecated" : false,
        "documentation" : null,
        "flattened" : false,
        "idempotencyToken" : false,
        "jsonvalue" : false,
        "location" : null,
        "locationName" : null,
        "payload" : false,
        "queryName" : null,
        "shape" : "Policy",
        "streaming" : false,
        "xmlNamespace" : null
      },
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "list",
      "value" : null,
      "wrapper" : false
    },
    "Policy" : {
      "deprecated" : false,
      "documentation" : "<p>Describes an AWS IoT policy.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "policyArn" : {
          "deprecated" : false,
          "documentation" : "<p>The policy ARN.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyName" : {
          "deprecated" : false,
          "documentation" : "<p>The policy name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "PolicyArn" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "PolicyDocument" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "PolicyName" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 128,
      "member" : null,
      "members" : { },
      "min" : 1,
      "pattern" : "[\\w+=,.@-]+",
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "PolicyVersion" : {
      "deprecated" : false,
      "documentation" : "<p>Describes a policy version.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "createDate" : {
          "deprecated" : false,
          "documentation" : "<p>The date and time the policy was created.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DateType",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "isDefaultVersion" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies whether the policy version is the default.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "IsDefaultVersion",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "versionId" : {
          "deprecated" : false,
          "documentation" : "<p>The policy version ID.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyVersionId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "PolicyVersionId" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : "[0-9]+",
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "PolicyVersions" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : {
        "deprecated" : false,
        "documentation" : null,
        "flattened" : false,
        "idempotencyToken" : false,
        "jsonvalue" : false,
        "location" : null,
        "locationName" : null,
        "payload" : false,
        "queryName" : null,
        "shape" : "PolicyVersion",
        "streaming" : false,
        "xmlNamespace" : null
      },
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "list",
      "value" : null,
      "wrapper" : false
    },
    "Principal" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "PrincipalArn" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "Principals" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : {
        "deprecated" : false,
        "documentation" : null,
        "flattened" : false,
        "idempotencyToken" : false,
        "jsonvalue" : false,
        "location" : null,
        "locationName" : null,
        "payload" : false,
        "queryName" : null,
        "shape" : "PrincipalArn",
        "streaming" : false,
        "xmlNamespace" : null
      },
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "list",
      "value" : null,
      "wrapper" : false
    },
    "PrivateKey" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 1,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "PublicKey" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 1,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "PutItemInput" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the DynamoActionVS action that specifies the DynamoDB table to which the message data will be written.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "tableName" : {
          "deprecated" : false,
          "documentation" : "<p>The table where the message data will be written</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "TableName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "tableName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "QueueUrl" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "RangeKeyField" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "RangeKeyValue" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "RegisterCACertificateRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input to the RegisterCACertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "allowAutoRegistration" : {
          "deprecated" : false,
          "documentation" : "<p>Allows this CA certificate to be used for auto registration of device certificates.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "allowAutoRegistration",
          "payload" : false,
          "queryName" : null,
          "shape" : "AllowAutoRegistration",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "caCertificate" : {
          "deprecated" : false,
          "documentation" : "<p>The CA certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificatePem",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "setAsActive" : {
          "deprecated" : false,
          "documentation" : "<p>A boolean value that specifies if the CA certificate is set to active.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "setAsActive",
          "payload" : false,
          "queryName" : null,
          "shape" : "SetAsActive",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "verificationCertificate" : {
          "deprecated" : false,
          "documentation" : "<p>The private key verification certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificatePem",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "caCertificate", "verificationCertificate" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "RegisterCACertificateResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the RegisterCACertificateResponse operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateArn" : {
          "deprecated" : false,
          "documentation" : "<p>The CA certificate ARN.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The CA certificate identifier.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "RegisterCertificateRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input to the RegisterCertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "caCertificatePem" : {
          "deprecated" : false,
          "documentation" : "<p>The CA certificate used to sign the device certificate being registered.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificatePem",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificatePem" : {
          "deprecated" : false,
          "documentation" : "<p>The certificate data, in PEM format.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificatePem",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "setAsActive" : {
          "deprecated" : true,
          "documentation" : "<p>A boolean value that specifies if the CA certificate is set to active.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "setAsActive",
          "payload" : false,
          "queryName" : null,
          "shape" : "SetAsActiveFlag",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "status" : {
          "deprecated" : false,
          "documentation" : null,
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateStatus",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "certificatePem" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "RegisterCertificateResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the RegisterCertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateArn" : {
          "deprecated" : false,
          "documentation" : "<p>The certificate ARN.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The certificate identifier.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "RegistrationCode" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 64,
      "member" : null,
      "members" : { },
      "min" : 64,
      "pattern" : "(0x)?[a-fA-F0-9]+",
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "RegistrationCodeValidationException" : {
      "deprecated" : false,
      "documentation" : "<p>The registration code is invalid.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 400
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>Additional information about the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "RejectCertificateTransferRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the RejectCertificateTransfer operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "certificateId",
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "rejectReason" : {
          "deprecated" : false,
          "documentation" : "<p>The reason the certificate transfer was rejected.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Message",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "certificateId" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "RemoveThingType" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "boolean",
      "value" : null,
      "wrapper" : false
    },
    "ReplaceTopicRuleRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the ReplaceTopicRule operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "ruleName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the rule.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "ruleName",
          "payload" : false,
          "queryName" : null,
          "shape" : "RuleName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "topicRulePayload" : {
          "deprecated" : false,
          "documentation" : "<p>The rule payload.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "TopicRulePayload",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : "topicRulePayload",
      "required" : [ "ruleName", "topicRulePayload" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "RepublishAction" : {
      "deprecated" : false,
      "documentation" : "<p>Describes an action to republish to another topic.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "roleArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the IAM role that grants access.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "topic" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the MQTT topic.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "TopicPattern",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "roleArn", "topic" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ResourceAlreadyExistsException" : {
      "deprecated" : false,
      "documentation" : "<p>The resource already exists.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 409
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "resourceArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the resource that caused the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "resourceArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "resourceId" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the resource that caused the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "resourceId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ResourceNotFoundException" : {
      "deprecated" : false,
      "documentation" : "<p>The specified resource does not exist.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 404
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "RuleArn" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "RuleName" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 128,
      "member" : null,
      "members" : { },
      "min" : 1,
      "pattern" : "^[a-zA-Z0-9_]+$",
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "S3Action" : {
      "deprecated" : false,
      "documentation" : "<p>Describes an action to write data to an Amazon S3 bucket.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "bucketName" : {
          "deprecated" : false,
          "documentation" : "<p>The Amazon S3 bucket.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "BucketName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "cannedAcl" : {
          "deprecated" : false,
          "documentation" : "<p>The Amazon S3 canned ACL that controls access to the object identified by the object key. For more information, see <a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl\">S3 canned ACLs</a>.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CannedAccessControlList",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "key" : {
          "deprecated" : false,
          "documentation" : "<p>The object key.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Key",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "roleArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the IAM role that grants access.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsArn",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "roleArn", "bucketName", "key" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "SQL" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "SearchableAttributes" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : {
        "deprecated" : false,
        "documentation" : null,
        "flattened" : false,
        "idempotencyToken" : false,
        "jsonvalue" : false,
        "location" : null,
        "locationName" : null,
        "payload" : false,
        "queryName" : null,
        "shape" : "AttributeName",
        "streaming" : false,
        "xmlNamespace" : null
      },
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "list",
      "value" : null,
      "wrapper" : false
    },
    "ServiceUnavailableException" : {
      "deprecated" : false,
      "documentation" : "<p>The service is temporarily unavailable.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 503
      },
      "exception" : true,
      "fault" : true,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "SetAsActive" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "boolean",
      "value" : null,
      "wrapper" : false
    },
    "SetAsActiveFlag" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "boolean",
      "value" : null,
      "wrapper" : false
    },
    "SetAsDefault" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "boolean",
      "value" : null,
      "wrapper" : false
    },
    "SetDefaultPolicyVersionRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the SetDefaultPolicyVersion operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "policyName" : {
          "deprecated" : false,
          "documentation" : "<p>The policy name.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "policyName",
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "policyVersionId" : {
          "deprecated" : false,
          "documentation" : "<p>The policy version ID.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "policyVersionId",
          "payload" : false,
          "queryName" : null,
          "shape" : "PolicyVersionId",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "policyName", "policyVersionId" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "SetLoggingOptionsRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the SetLoggingOptions operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "loggingOptionsPayload" : {
          "deprecated" : false,
          "documentation" : "<p>The logging options payload.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "LoggingOptionsPayload",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : "loggingOptionsPayload",
      "required" : [ "loggingOptionsPayload" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "SnsAction" : {
      "deprecated" : false,
      "documentation" : "<p>Describes an action to publish to an Amazon SNS topic.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "messageFormat" : {
          "deprecated" : false,
          "documentation" : "<p>The message format of the message to publish. Optional. Accepted values are \"JSON\" and \"RAW\". The default value of the attribute is \"RAW\". SNS uses this setting to determine if the payload should be parsed and relevant platform-specific bits of the payload should be extracted. To read more about SNS message formats, see <a href=\"http://docs.aws.amazon.com/sns/latest/dg/json-formats.html\"></a> refer to their official documentation.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "MessageFormat",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "roleArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the IAM role that grants access.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "targetArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the SNS topic.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsArn",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "targetArn", "roleArn" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "SqlParseException" : {
      "deprecated" : false,
      "documentation" : "<p>The Rule-SQL expression can't be parsed correctly.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 400
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "SqsAction" : {
      "deprecated" : false,
      "documentation" : "<p>Describes an action to publish data to an Amazon SQS queue.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "queueUrl" : {
          "deprecated" : false,
          "documentation" : "<p>The URL of the Amazon SQS queue.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "QueueUrl",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "roleArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the IAM role that grants access.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "useBase64" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies whether to use Base64 encoding.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "UseBase64",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "roleArn", "queueUrl" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "StateReason" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "StateValue" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "StreamName" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "TableName" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "ThingArn" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "ThingAttribute" : {
      "deprecated" : false,
      "documentation" : "<p>The properties of the thing, including thing name, thing type name, and a list of thing attributes.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "attributes" : {
          "deprecated" : false,
          "documentation" : "<p>A list of thing attributes which are name-value pairs.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Attributes",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingTypeName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing type, if the thing has been associated with a type.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "version" : {
          "deprecated" : false,
          "documentation" : "<p>The version of the thing record in the registry.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Version",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ThingAttributeList" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : {
        "deprecated" : false,
        "documentation" : null,
        "flattened" : false,
        "idempotencyToken" : false,
        "jsonvalue" : false,
        "location" : null,
        "locationName" : null,
        "payload" : false,
        "queryName" : null,
        "shape" : "ThingAttribute",
        "streaming" : false,
        "xmlNamespace" : null
      },
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "list",
      "value" : null,
      "wrapper" : false
    },
    "ThingName" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 128,
      "member" : null,
      "members" : { },
      "min" : 1,
      "pattern" : "[a-zA-Z0-9:_-]+",
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "ThingNameList" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : {
        "deprecated" : false,
        "documentation" : null,
        "flattened" : false,
        "idempotencyToken" : false,
        "jsonvalue" : false,
        "location" : null,
        "locationName" : null,
        "payload" : false,
        "queryName" : null,
        "shape" : "ThingName",
        "streaming" : false,
        "xmlNamespace" : null
      },
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "list",
      "value" : null,
      "wrapper" : false
    },
    "ThingTypeArn" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "ThingTypeDefinition" : {
      "deprecated" : false,
      "documentation" : "<p>The definition of the thing type, including thing type name and description.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "thingTypeMetadata" : {
          "deprecated" : false,
          "documentation" : null,
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeMetadata",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingTypeName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing type.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingTypeProperties" : {
          "deprecated" : false,
          "documentation" : "<p>The ThingTypeProperties for the thing type.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeProperties",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ThingTypeDescription" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 2028,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : "[\\p{Graph}\\x20]*",
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "ThingTypeList" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : {
        "deprecated" : false,
        "documentation" : null,
        "flattened" : false,
        "idempotencyToken" : false,
        "jsonvalue" : false,
        "location" : null,
        "locationName" : null,
        "payload" : false,
        "queryName" : null,
        "shape" : "ThingTypeDefinition",
        "streaming" : false,
        "xmlNamespace" : null
      },
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "list",
      "value" : null,
      "wrapper" : false
    },
    "ThingTypeMetadata" : {
      "deprecated" : false,
      "documentation" : "<p>The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when time was deprecated.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "creationDate" : {
          "deprecated" : false,
          "documentation" : "<p>The date and time when the thing type was created.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CreationDate",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "deprecated" : {
          "deprecated" : false,
          "documentation" : "<p>Whether the thing type is deprecated. If <b>true</b>, no new things could be associated with this type.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Boolean",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "deprecationDate" : {
          "deprecated" : false,
          "documentation" : "<p>The date and time when the thing type was deprecated.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DeprecationDate",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ThingTypeName" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 128,
      "member" : null,
      "members" : { },
      "min" : 1,
      "pattern" : "[a-zA-Z0-9:_-]+",
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "ThingTypeProperties" : {
      "deprecated" : false,
      "documentation" : "<p>The ThingTypeProperties contains information about the thing type including: a thing type description, and a list of searchable thing attribute names.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "searchableAttributes" : {
          "deprecated" : false,
          "documentation" : "<p>A list of searchable thing attribute names.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "SearchableAttributes",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingTypeDescription" : {
          "deprecated" : false,
          "documentation" : "<p>The description of the thing type.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeDescription",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "ThrottlingException" : {
      "deprecated" : false,
      "documentation" : "<p>The rate exceeds the limit.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 429
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "Topic" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "TopicPattern" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "TopicRule" : {
      "deprecated" : false,
      "documentation" : "<p>Describes a rule.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "actions" : {
          "deprecated" : false,
          "documentation" : "<p>The actions associated with the rule.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ActionList",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "awsIotSqlVersion" : {
          "deprecated" : false,
          "documentation" : "<p>The version of the SQL rules engine to use when evaluating the rule.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsIotSqlVersion",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "createdAt" : {
          "deprecated" : false,
          "documentation" : "<p>The date and time the rule was created.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CreatedAtDate",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "description" : {
          "deprecated" : false,
          "documentation" : "<p>The description of the rule.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Description",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "ruleDisabled" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies whether the rule is disabled.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "IsDisabled",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "ruleName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the rule.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "RuleName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "sql" : {
          "deprecated" : false,
          "documentation" : "<p>The SQL statement used to query the topic. When using a SQL query with multiple lines, be sure to escape the newline characters.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "SQL",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "TopicRuleList" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : {
        "deprecated" : false,
        "documentation" : null,
        "flattened" : false,
        "idempotencyToken" : false,
        "jsonvalue" : false,
        "location" : null,
        "locationName" : null,
        "payload" : false,
        "queryName" : null,
        "shape" : "TopicRuleListItem",
        "streaming" : false,
        "xmlNamespace" : null
      },
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "list",
      "value" : null,
      "wrapper" : false
    },
    "TopicRuleListItem" : {
      "deprecated" : false,
      "documentation" : "<p>Describes a rule.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "createdAt" : {
          "deprecated" : false,
          "documentation" : "<p>The date and time the rule was created.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CreatedAtDate",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "ruleArn" : {
          "deprecated" : false,
          "documentation" : "<p>The rule ARN.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "RuleArn",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "ruleDisabled" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies whether the rule is disabled.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "IsDisabled",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "ruleName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the rule.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "RuleName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "topicPattern" : {
          "deprecated" : false,
          "documentation" : "<p>The pattern for the topic names that apply.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "TopicPattern",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "TopicRulePayload" : {
      "deprecated" : false,
      "documentation" : "<p>Describes a rule.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "actions" : {
          "deprecated" : false,
          "documentation" : "<p>The actions associated with the rule.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ActionList",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "awsIotSqlVersion" : {
          "deprecated" : false,
          "documentation" : "<p>The version of the SQL rules engine to use when evaluating the rule.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsIotSqlVersion",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "description" : {
          "deprecated" : false,
          "documentation" : "<p>The description of the rule.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Description",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "ruleDisabled" : {
          "deprecated" : false,
          "documentation" : "<p>Specifies whether the rule is disabled.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "IsDisabled",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "sql" : {
          "deprecated" : false,
          "documentation" : "<p>The SQL statement used to query the topic. For more information, see <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference\">AWS IoT SQL Reference</a> in the <i>AWS IoT Developer Guide</i>.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "SQL",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "sql", "actions" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "TransferAlreadyCompletedException" : {
      "deprecated" : false,
      "documentation" : "<p>You can't revert the certificate transfer because the transfer is already complete.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 410
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "TransferCertificateRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the TransferCertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "certificateId",
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "targetAwsAccount" : {
          "deprecated" : false,
          "documentation" : "<p>The AWS account.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "targetAwsAccount",
          "payload" : false,
          "queryName" : null,
          "shape" : "AwsAccountId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "transferMessage" : {
          "deprecated" : false,
          "documentation" : "<p>The transfer message.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Message",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "certificateId", "targetAwsAccount" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "TransferCertificateResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the TransferCertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "transferredCertificateArn" : {
          "deprecated" : false,
          "documentation" : "<p>The ARN of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateArn",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "TransferConflictException" : {
      "deprecated" : false,
      "documentation" : "<p>You can't transfer the certificate because authorization policies are still attached.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 409
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "TransferData" : {
      "deprecated" : false,
      "documentation" : "<p>Data used to transfer a certificate to an AWS account.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "acceptDate" : {
          "deprecated" : false,
          "documentation" : "<p>The date the transfer was accepted.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DateType",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "rejectDate" : {
          "deprecated" : false,
          "documentation" : "<p>The date the transfer was rejected.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DateType",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "rejectReason" : {
          "deprecated" : false,
          "documentation" : "<p>The reason why the transfer was rejected.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Message",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "transferDate" : {
          "deprecated" : false,
          "documentation" : "<p>The date the transfer took place.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "DateType",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "transferMessage" : {
          "deprecated" : false,
          "documentation" : "<p>The transfer message.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "Message",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "UnauthorizedException" : {
      "deprecated" : false,
      "documentation" : "<p>You are not authorized to perform this operation.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 401
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "UndoDeprecate" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "boolean",
      "value" : null,
      "wrapper" : false
    },
    "UpdateCACertificateRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input to the UpdateCACertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The CA certificate identifier.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "caCertificateId",
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "newAutoRegistrationStatus" : {
          "deprecated" : false,
          "documentation" : "<p>The new value for the auto registration status. Valid values are: \"ENABLE\" or \"DISABLE\".</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "newAutoRegistrationStatus",
          "payload" : false,
          "queryName" : null,
          "shape" : "AutoRegistrationStatus",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "newStatus" : {
          "deprecated" : false,
          "documentation" : "<p>The updated status of the CA certificate.</p> <p><b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "newStatus",
          "payload" : false,
          "queryName" : null,
          "shape" : "CACertificateStatus",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "certificateId" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "UpdateCertificateRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the UpdateCertificate operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "certificateId" : {
          "deprecated" : false,
          "documentation" : "<p>The ID of the certificate.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "certificateId",
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateId",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "newStatus" : {
          "deprecated" : false,
          "documentation" : "<p>The new status.</p> <p><b>Note:</b> Setting the status to PENDING_TRANSFER will result in an exception being thrown. PENDING_TRANSFER is a status used internally by AWS IoT. It is not intended for developer use.</p> <p><b>Note:</b> The status value REGISTER_INACTIVE is deprecated and should not be used.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "querystring",
          "locationName" : "newStatus",
          "payload" : false,
          "queryName" : null,
          "shape" : "CertificateStatus",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "certificateId", "newStatus" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "UpdateThingRequest" : {
      "deprecated" : false,
      "documentation" : "<p>The input for the UpdateThing operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "attributePayload" : {
          "deprecated" : false,
          "documentation" : "<p>A list of thing attributes, a JSON string containing name-value pairs. For example:</p> <p><code>{\\\"attributes\\\":{\\\"name1\\\":\\\"value2\\\"}})</code></p> <p>This data is used to add new attributes or update existing attributes.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "AttributePayload",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "expectedVersion" : {
          "deprecated" : false,
          "documentation" : "<p>The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>UpdateThing</code> request is rejected with a <code>VersionConflictException</code>.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "OptionalVersion",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "removeThingType" : {
          "deprecated" : false,
          "documentation" : "<p>Remove a thing type association. If <b>true</b>, the assocation is removed.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "RemoveThingType",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing to update.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : "uri",
          "locationName" : "thingName",
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingName",
          "streaming" : false,
          "xmlNamespace" : null
        },
        "thingTypeName" : {
          "deprecated" : false,
          "documentation" : "<p>The name of the thing type.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "ThingTypeName",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : [ "thingName" ],
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "UpdateThingResponse" : {
      "deprecated" : false,
      "documentation" : "<p>The output from the UpdateThing operation.</p>",
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "UseBase64" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "boolean",
      "value" : null,
      "wrapper" : false
    },
    "Version" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "long",
      "value" : null,
      "wrapper" : false
    },
    "VersionConflictException" : {
      "deprecated" : false,
      "documentation" : "<p>An exception thrown when the version of a thing passed to a command is different than the version specified with the --version parameter. </p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 409
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "VersionsLimitExceededException" : {
      "deprecated" : false,
      "documentation" : "<p>The number of policy versions exceeds the limit.</p>",
      "enum" : null,
      "error" : {
        "code" : null,
        "httpStatusCode" : 409
      },
      "exception" : true,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : {
        "message" : {
          "deprecated" : false,
          "documentation" : "<p>The message for the exception.</p>",
          "flattened" : false,
          "idempotencyToken" : false,
          "jsonvalue" : false,
          "location" : null,
          "locationName" : null,
          "payload" : false,
          "queryName" : null,
          "shape" : "errorMessage",
          "streaming" : false,
          "xmlNamespace" : null
        }
      },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "structure",
      "value" : null,
      "wrapper" : false
    },
    "errorMessage" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "resourceArn" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    },
    "resourceId" : {
      "deprecated" : false,
      "documentation" : null,
      "enum" : null,
      "error" : null,
      "exception" : false,
      "fault" : false,
      "flattened" : false,
      "key" : null,
      "max" : 0,
      "member" : null,
      "members" : { },
      "min" : 0,
      "pattern" : null,
      "payload" : null,
      "required" : null,
      "streaming" : false,
      "type" : "string",
      "value" : null,
      "wrapper" : false
    }
  },
  "documentation" : "<fullname>AWS IoT</fullname> <p>AWS IoT provides secure, bi-directional communication between Internet-connected things (such as sensors, actuators, embedded devices, or smart appliances) and the AWS cloud. You can discover your custom IoT-Data endpoint to communicate with, configure rules for data processing and integration with other services, organize resources associated with each thing (Thing Registry), configure logging, and create and manage policies and credentials to authenticate things.</p> <p>For more information about how AWS IoT works, see the <a href=\"http://docs.aws.amazon.com/iot/latest/developerguide/aws-iot-how-it-works.html\">Developer Guide</a>.</p>"
}